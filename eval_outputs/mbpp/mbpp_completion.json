{"task_id":{"0":2,"1":3,"2":4,"3":6,"4":7,"5":8,"6":9,"7":11,"8":12,"9":14,"10":16,"11":17,"12":18,"13":19,"14":20,"15":56,"16":57,"17":58,"18":59,"19":61,"20":62,"21":63,"22":64,"23":65,"24":66,"25":67,"26":68,"27":69,"28":70,"29":71,"30":72,"31":74,"32":75,"33":77,"34":79,"35":80,"36":82,"37":83,"38":84,"39":85,"40":86,"41":87,"42":88,"43":89,"44":90,"45":91,"46":92,"47":93,"48":94,"49":95,"50":96,"51":97,"52":98,"53":99,"54":100,"55":101,"56":102,"57":103,"58":104,"59":105,"60":106,"61":108,"62":109,"63":111,"64":113,"65":115,"66":116,"67":117,"68":118,"69":119,"70":120,"71":123,"72":124,"73":125,"74":126,"75":127,"76":128,"77":129,"78":130,"79":131,"80":132,"81":133,"82":135,"83":137,"84":138,"85":139,"86":140,"87":141,"88":142,"89":143,"90":145,"91":160,"92":161,"93":162,"94":164,"95":165,"96":166,"97":167,"98":168,"99":170,"100":171,"101":172,"102":222,"103":223,"104":224,"105":226,"106":227,"107":229,"108":230,"109":232,"110":233,"111":234,"112":235,"113":237,"114":238,"115":239,"116":240,"117":242,"118":244,"119":245,"120":247,"121":249,"122":250,"123":251,"124":252,"125":253,"126":255,"127":256,"128":257,"129":259,"130":260,"131":261,"132":262,"133":264,"134":265,"135":266,"136":267,"137":268,"138":269,"139":270,"140":271,"141":272,"142":273,"143":274,"144":276,"145":277,"146":278,"147":279,"148":280,"149":281,"150":282,"151":283,"152":284,"153":285,"154":286,"155":287,"156":290,"157":292,"158":293,"159":294,"160":295,"161":296,"162":297,"163":299,"164":300,"165":301,"166":305,"167":306,"168":308,"169":309,"170":310,"171":311,"172":312,"173":388,"174":389,"175":390,"176":391,"177":392,"178":394,"179":395,"180":396,"181":397,"182":398,"183":400,"184":404,"185":405,"186":406,"187":407,"188":409,"189":410,"190":412,"191":413,"192":414,"193":415,"194":418,"195":419,"196":420,"197":421,"198":422,"199":424,"200":425,"201":426,"202":427,"203":428,"204":429,"205":430,"206":431,"207":432,"208":433,"209":435,"210":436,"211":437,"212":438,"213":439,"214":440,"215":441,"216":442,"217":445,"218":446,"219":447,"220":448,"221":450,"222":451,"223":453,"224":454,"225":455,"226":456,"227":457,"228":458,"229":459,"230":460,"231":461,"232":462,"233":463,"234":465,"235":468,"236":470,"237":471,"238":472,"239":473,"240":474,"241":475,"242":476,"243":477,"244":478,"245":479,"246":554,"247":555,"248":556,"249":557,"250":558,"251":559,"252":560,"253":562,"254":563,"255":564,"256":565,"257":566,"258":567,"259":568,"260":569,"261":572,"262":573,"263":574,"264":576,"265":577,"266":578,"267":579,"268":580,"269":581,"270":582,"271":583,"272":585,"273":586,"274":587,"275":588,"276":589,"277":590,"278":591,"279":592,"280":593,"281":594,"282":595,"283":596,"284":597,"285":598,"286":599,"287":600,"288":602,"289":603,"290":604,"291":605,"292":606,"293":607,"294":608,"295":610,"296":611,"297":612,"298":614,"299":615,"300":616,"301":618,"302":619,"303":620,"304":622,"305":623,"306":624,"307":626,"308":628,"309":629,"310":630,"311":631,"312":632,"313":633,"314":635,"315":637,"316":638,"317":639,"318":640,"319":641,"320":643,"321":644,"322":720,"323":721,"324":722,"325":723,"326":724,"327":725,"328":726,"329":728,"330":730,"331":731,"332":732,"333":733,"334":734,"335":735,"336":736,"337":737,"338":739,"339":740,"340":741,"341":742,"342":743,"343":744,"344":745,"345":746,"346":748,"347":749,"348":750,"349":751,"350":752,"351":753,"352":754,"353":755,"354":757,"355":758,"356":759,"357":760,"358":762,"359":763,"360":764,"361":765,"362":766,"363":767,"364":769,"365":770,"366":771,"367":772,"368":773,"369":775,"370":777,"371":778,"372":780,"373":781,"374":782,"375":783,"376":784,"377":785,"378":786,"379":787,"380":788,"381":790,"382":791,"383":792,"384":793,"385":794,"386":796,"387":797,"388":798,"389":799,"390":800,"391":801,"392":803,"393":804,"394":805,"395":806,"396":807,"397":808,"398":809},"prompt":{"0":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `similar_elements(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function to find the shared elements from the given two lists.\n>>> assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","1":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_not_prime(n)` to solve the following problem: Present code in ```python```\nWrite a python function to identify non-prime numbers.\n>>> assert is_not_prime(2) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","2":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `heap_queue_largest(nums, n)` to solve the following problem: Present code in ```python```\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n>>> assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","3":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_Power_Of_Two(x)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n>>> assert differ_At_One_Bit_Pos(13,9) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","4":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_char_long(text)` to solve the following problem: Present code in ```python```\nWrite a function to find all words which are at least 4 characters long in a string.\n>>> assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","5":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `square_nums(nums)` to solve the following problem: Present code in ```python```\nWrite a function to find squares of individual elements in a list.\n>>> assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","6":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_Rotations(str)` to solve the following problem: Present code in ```python```\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n>>> assert find_Rotations(\"aaaa\") == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","7":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_Occ(s, ch)` to solve the following problem: Present code in ```python```\nWrite a python function to remove first and last occurrence of a given character from the string.\n>>> assert remove_Occ(\"hello\",\"l\") == \"heo\"\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","8":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sort_matrix(M)` to solve the following problem: Present code in ```python```\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n>>> assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","9":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_Volume(l, b, h)` to solve the following problem: Present code in ```python```\nWrite a python function to find the volume of a triangular prism.\n>>> assert find_Volume(10,8,6) == 240\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","10":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `text_lowercase_underscore(text)` to solve the following problem: Present code in ```python```\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n>>> assert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","11":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `square_perimeter(a)` to solve the following problem: Present code in ```python```\nWrite a function that returns the perimeter of a square given its side length as input.\n>>> assert square_perimeter(10)==40\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","12":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `str_to_list(string)` to solve the following problem: Present code in ```python```\nWrite a function to remove characters from the first string which are present in the second string.\n>>> assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","13":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `test_duplicate(arraynums)` to solve the following problem: Present code in ```python```\nWrite a function to find whether a given array of integers contains any duplicate element.\n>>> assert test_duplicate(([1,2,3,4,5]))==False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","14":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_woodall(x)` to solve the following problem: Present code in ```python```\nWrite a function to check if the given number is woodball or not.\n>>> assert is_woodall(383) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","15":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `rev(num)` to solve the following problem: Present code in ```python```\nWrite a python function to check if a given number is one less than twice its reverse.\n>>> assert check(70) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","16":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_Max_Num(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the largest number that can be formed with the given list of digits.\n>>> assert find_Max_Num([1,2,3]) == 321\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","17":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `opposite_Signs(x, y)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the given two integers have opposite sign or not.\n>>> assert opposite_Signs(1,-2) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","18":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_octagonal(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth octagonal number.\n>>> assert is_octagonal(5) == 65\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","19":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_Substrings(s)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n>>> assert count_Substrings('112112') == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","20":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `smallest_num(xs)` to solve the following problem: Present code in ```python```\nWrite a python function to find smallest number in a list.\n>>> assert smallest_num([10, 20, 1, 45, 99]) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","21":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_difference(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n>>> assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","22":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `subject_marks(subjectmarks)` to solve the following problem: Present code in ```python```\nWrite a function to sort a list of tuples using the second value of each tuple.\n>>> assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","23":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `recursive_list_sum(data_list)` to solve the following problem: Present code in ```python```\nWrite a function to flatten a list and sum all of its elements.\n>>> assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","24":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `pos_count(list)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of positive numbers in a list.\n>>> assert pos_count([1,-2,3,-4]) == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","25":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `bell_number(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the number of ways to partition a set of Bell numbers.\n>>> assert bell_number(2)==2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","26":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_Monotonic(A)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the given array is monotonic or not.\n>>> assert is_Monotonic([6, 5, 4, 4]) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","27":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_sublist(l, s)` to solve the following problem: Present code in ```python```\nWrite a function to check whether a list contains the given sublist or not.\n>>> assert is_sublist([2,4,3,5,7],[3,7])==False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","28":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_equal_tuple(Input)` to solve the following problem: Present code in ```python```\nWrite a function to find whether all the given tuples have equal length or not.\n>>> assert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","29":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `comb_sort(nums)` to solve the following problem: Present code in ```python```\nWrite a function to sort a list of elements.\n>>> assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","30":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `if_Square(n)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n>>> assert dif_Square(5) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","31":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_samepatterns(colors, patterns)` to solve the following problem: Present code in ```python```\nWrite a function to check whether it follows the sequence given in the patterns array.\n>>> assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","32":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_tuples(test_list, K)` to solve the following problem: Present code in ```python```\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n>>> assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","33":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_Diff(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find whether a number is divisible by 11.\n>>> assert is_Diff (12345) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","34":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `word_len(s)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the length of the word is odd or not.\n>>> assert word_len(\"Hadoop\") == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","35":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tetrahedral_number(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth tetrahedral number.\n>>> assert tetrahedral_number(5) == 35\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","36":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `volume_sphere(r)` to solve the following problem: Present code in ```python```\nWrite a function to find the volume of a sphere.\n>>> assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","37":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `get_Char(strr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n>>> assert get_Char(\"abc\") == \"f\"\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","38":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sequence(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth number in the newman conway sequence.\n>>> assert sequence(10) == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","39":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `surfacearea_sphere(r)` to solve the following problem: Present code in ```python```\nWrite a function to find the surface area of a sphere.\n>>> assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","40":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `centered_hexagonal_number(n)` to solve the following problem: Present code in ```python```\nWrite a function to find nth centered hexagonal number.\n>>> assert centered_hexagonal_number(10) == 271\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","41":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `merge_dictionaries_three(dict1, dict2, dict3)` to solve the following problem: Present code in ```python```\nWrite a function to merge three dictionaries into a single dictionary.\n>>> assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","42":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `req_count(list1)` to solve the following problem: Present code in ```python```\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n>>> assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","43":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `closest_num(N)` to solve the following problem: Present code in ```python```\nWrite a function to find the closest smaller number than n.\n>>> assert closest_num(11) == 10\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","44":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `len_log(list1)` to solve the following problem: Present code in ```python```\nWrite a python function to find the length of the longest word.\n>>> assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","45":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_substring(str1, sub_str)` to solve the following problem: Present code in ```python```\nWrite a function to check if a string is present as a substring in a given list of string values.\n>>> assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","46":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_undulating(n)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given number is undulating or not.\n>>> assert is_undulating(1212121) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","47":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `power(a, b)` to solve the following problem: Present code in ```python```\nWrite a function to calculate the value of 'a' to the power 'b'.\n>>> assert power(3,4) == 81\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","48":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `index_minimum(test_list)` to solve the following problem: Present code in ```python```\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n>>> assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","49":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Find_Min_Length(lst)` to solve the following problem: Present code in ```python```\nWrite a python function to find the length of the smallest list in a list of lists.\n>>> assert Find_Min_Length([[1],[1,2]]) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","50":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ivisor(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the number of divisors of a given integer.\n>>> assert divisor(15) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","51":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `requency_lists(list1)` to solve the following problem: Present code in ```python```\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n>>> assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","52":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `multiply_num(numbers)` to solve the following problem: Present code in ```python```\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n>>> assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","53":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `cimal_to_binary(n)` to solve the following problem: Present code in ```python```\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n>>> assert decimal_to_binary(8) == '1000'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","54":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `next_smallest_palindrome(num)` to solve the following problem: Present code in ```python```\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n>>> assert next_smallest_palindrome(99)==101\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","55":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `kth_element(arr, k)` to solve the following problem: Present code in ```python```\nWrite a function to find the kth element in the given array using 1-based indexing.\n>>> assert kth_element([12,3,5,7,19], 2) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","56":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `snake_to_camel(word)` to solve the following problem: Present code in ```python```\nWrite a function to convert a snake case string to camel case string.\n>>> assert snake_to_camel('python_program')=='PythonProgram'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","57":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ulerian_num(n, m)` to solve the following problem: Present code in ```python```\nWrite a function to find the Eulerian number a(n, m).\n>>> assert eulerian_num(3, 1) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","58":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sort_sublists(input_list)` to solve the following problem: Present code in ```python```\nWrite a function to sort each sublist of strings in a given list of lists.\n>>> assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","59":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count(lst)` to solve the following problem: Present code in ```python```\nWrite a python function to count true booleans in the given list.\n>>> assert count([True,False,True]) == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","60":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `add_lists(test_list, test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to append the given list to the given tuples.\n>>> assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","61":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `merge_sorted_list(num1, num2, num3)` to solve the following problem: Present code in ```python```\nWrite a function to merge three lists into a single sorted list.\n>>> assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","62":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `odd_Equivalent(s, n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n>>> assert odd_Equivalent(\"011001\",6) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","63":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `common_in_nested_lists(nestedlist)` to solve the following problem: Present code in ```python```\nWrite a function to find the common elements in given nested lists.\n>>> assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","64":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_integer(text)` to solve the following problem: Present code in ```python```\nWrite a function to check if a string represents an integer or not.\n>>> assert check_integer(\"python\")==False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","65":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `mpty_dit(list1)` to solve the following problem: Present code in ```python```\nWrite a function to check whether all dictionaries in a list are empty or not.\n>>> assert empty_dit([{},{},{}])==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","66":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tuple_to_int(nums)` to solve the following problem: Present code in ```python```\nWrite a function to convert a given tuple of positive integers into a single integer.\n>>> assert tuple_to_int((1,2,3))==123\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","67":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `list_to_float(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n>>> assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","68":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `string_to_list(string)` to solve the following problem: Present code in ```python```\nWrite a function to convert a string to a list of strings split on the space character.\n>>> assert string_to_list(\"python programming\")==['python','programming']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","69":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `search(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the element that appears only once in a sorted array.\n>>> assert search([1,1,2,2,3]) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","70":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_product_tuple(list1)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n>>> assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","71":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `amicable_numbers_sum(limit)` to solve the following problem: Present code in ```python```\nWrite a function to sum all amicable numbers from 1 to a specified number.\n>>> assert amicable_numbers_sum(999)==504\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","72":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `angle_complex(a, b)` to solve the following problem: Present code in ```python```\nWrite a function to get the angle of a complex number.\n>>> assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","73":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_length(string)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n>>> assert find_length(\"11000010001\") == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","74":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum(a, b)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of common divisors of two given numbers.\n>>> assert sum(10,15) == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","75":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `multiply_int(x, y)` to solve the following problem: Present code in ```python```\nWrite a function to multiply two integers.\n>>> assert multiply_int(10,20)==200\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","76":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `long_words(n, str)` to solve the following problem: Present code in ```python```\nWrite a function to find words that are longer than n characters from a given list of words.\n>>> assert long_words(3,\"python is a programming language\")==['python','programming','language']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","77":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `magic_square_test(my_matrix)` to solve the following problem: Present code in ```python```\nWrite a function to calculate whether the matrix is a magic square.\n>>> assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","78":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_occurrences(nums)` to solve the following problem: Present code in ```python```\nWrite a function to find the item with maximum frequency in a given list.\n>>> assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","79":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `reverse_vowels(str1)` to solve the following problem: Present code in ```python```\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n>>> assert reverse_vowels(\"Python\") == \"Python\"\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","80":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tup_string(tup1)` to solve the following problem: Present code in ```python```\nWrite a function to convert a tuple to a string.\n>>> assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","81":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_negativenum(nums)` to solve the following problem: Present code in ```python```\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n>>> assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","82":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `hexagonal_num(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth hexagonal number.\n>>> assert hexagonal_num(10) == 190\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","83":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `zero_count(nums)` to solve the following problem: Present code in ```python```\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n>>> assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","84":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_Sum_Of_Powers_Of_Two(n)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n>>> assert is_Sum_Of_Powers_Of_Two(10) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","85":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `circle_circumference(r)` to solve the following problem: Present code in ```python```\nWrite a function to find the circumference of a circle.\n>>> assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","86":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_singly(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to flatten the list of lists into a single set of numbers.\n>>> assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","87":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `pancake_sort(nums)` to solve the following problem: Present code in ```python```\nWrite a function to sort a list of elements.\n>>> assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","88":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_samepair(list1, list2, list3)` to solve the following problem: Present code in ```python```\nWrite a function to count number items that are identical in the same position of three given lists.\n>>> assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","89":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_lists(Input)` to solve the following problem: Present code in ```python```\nWrite a function to find number of lists present in the given tuple.\n>>> assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","90":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_Abs_Diff(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the maximum difference between any two elements in a given array.\n>>> assert max_Abs_Diff((2,1,5,3)) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","91":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_solution(a, b, n)` to solve the following problem: Present code in ```python```\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n>>> assert find_solution(2, 3, 7) == (2, 1)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","92":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_elements(list1, list2)` to solve the following problem: Present code in ```python```\nWrite a function to remove all elements from a given list present in another list.\n>>> assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","93":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_series(n)` to solve the following problem: Present code in ```python```\nWrite a function to calculate the sum (n - 2*i) from i=0 to n \/\/ 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n>>> assert sum_series(6) == 12\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","94":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `iv_sum(n)` to solve the following problem: Present code in ```python```\nWrite a function to determine if the sum of the divisors of two integers are the same.\n>>> assert are_equivalent(36, 57) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","95":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_char_position(str1)` to solve the following problem: Present code in ```python```\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n>>> assert count_char_position(\"xbcefg\") == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","96":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_even_pair(A)` to solve the following problem: Present code in ```python```\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n>>> assert find_even_pair([5, 4, 7, 2, 1]) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","97":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `next_power_of_2(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n>>> assert next_power_of_2(0) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","98":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `requency(a, x)` to solve the following problem: Present code in ```python```\nWrite a function to count the number of occurrences of a number in a given list.\n>>> assert frequency([1,2,3], 4) == 0\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","99":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_range_list(list1, m, n)` to solve the following problem: Present code in ```python```\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n>>> assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","100":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `perimeter_pentagon(a)` to solve the following problem: Present code in ```python```\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n>>> assert perimeter_pentagon(5) == 25\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","101":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_occurance(s)` to solve the following problem: Present code in ```python```\nWrite a function to count the number of occurence of the string 'std' in a given string.\n>>> assert count_occurance(\"letstdlenstdporstd\") == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","102":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_type(test_tuple)` to solve the following problem: Present code in ```python```\nWrite a function to check if all the elements in tuple have same data type or not.\n>>> assert check_type((5, 6, 7, 3, 5, 6) ) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","103":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_majority(arr, n, x)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n\/2 times.)\n>>> assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","104":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_Set_Bits(n)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n>>> assert count_Set_Bits(2) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","105":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `odd_values_string(str)` to solve the following problem: Present code in ```python```\nWrite a python function to remove the characters which have odd index values of a given string.\n>>> assert odd_values_string('abcdef') == 'ace'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","106":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `min_of_three(a, b, c)` to solve the following problem: Present code in ```python```\nWrite a function to find minimum of three numbers.\n>>> assert min_of_three(10,20,0)==0\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","107":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `re_arrange_array(arr, n)` to solve the following problem: Present code in ```python```\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n>>> assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","108":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `replace_blank(str1, char)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n>>> assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","109":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `larg_nnum(list1, n)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n>>> assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","110":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `lateralsuface_cylinder(r, h)` to solve the following problem: Present code in ```python```\nWrite a function to find the lateral surface area of a cylinder.\n>>> assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","111":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `volume_cube(l)` to solve the following problem: Present code in ```python```\nWrite a function to find the volume of a cube given its side length.\n>>> assert volume_cube(3)==27\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","112":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ven_bit_set_number(n)` to solve the following problem: Present code in ```python```\nWrite a python function to set all even bits of a given number.\n>>> assert even_bit_set_number(10) == 10\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","113":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_occurences(test_list)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n>>> assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","114":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `number_of_substrings(str)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of non-empty substrings of a given string.\n>>> assert number_of_substrings(\"abc\") == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","115":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `get_total_number_of_sequences(m, n)` to solve the following problem: Present code in ```python```\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n>>> assert get_total_number_of_sequences(10, 4) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","116":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `replace_list(list1, list2)` to solve the following problem: Present code in ```python```\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n>>> assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","117":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_charac(str1)` to solve the following problem: Present code in ```python```\nWrite a function to count the total number of characters in a string.\n>>> assert count_charac(\"python programming\")==18\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","118":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `next_Perfect_Square(N)` to solve the following problem: Present code in ```python```\nWrite a python function to find the next perfect square greater than a given number.\n>>> assert next_Perfect_Square(35) == 36\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","119":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_sum(arr)` to solve the following problem: Present code in ```python```\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n>>> assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","120":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `lps(str)` to solve the following problem: Present code in ```python```\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n>>> assert lps(\"TENS FOR TENS\") == 5\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","121":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `intersection_array(array_nums1, array_nums2)` to solve the following problem: Present code in ```python```\nWrite a function to find the intersection of two arrays.\n>>> assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","122":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_X(tup, x)` to solve the following problem: Present code in ```python```\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n>>> assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","123":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `insert_element(list, element)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n>>> assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","124":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `convert(numbers)` to solve the following problem: Present code in ```python```\nWrite a python function to convert complex numbers to polar coordinates.\n>>> assert convert(1) == (1.0, 0.0)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","125":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_integer(list1)` to solve the following problem: Present code in ```python```\nWrite a python function that returns the number of integer elements in a given list.\n>>> assert count_integer([1,2,'abc',1.2]) == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","126":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `combinations_colors(l, n)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n>>> assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","127":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_Primes_nums(n)` to solve the following problem: Present code in ```python```\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n>>> assert count_Primes_nums(5) == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","128":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `swap_numbers(a, b)` to solve the following problem: Present code in ```python```\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n>>> assert swap_numbers(10,20)==(20,10)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","129":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `maximize_elements(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function to maximize the given two tuples.\n>>> assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","130":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `newman_prime(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n>>> assert newman_prime(3) == 7\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","131":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ivision_elements(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n>>> assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","132":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `split_two_parts(list1, L)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n>>> assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","133":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `og_age(h_age)` to solve the following problem: Present code in ```python```\nWrite a function to calculate a dog's age in dog's years.\n>>> assert dog_age(12)==61\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","134":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `list_split(S, step)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n>>> assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","135":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `lateralsurface_cube(l)` to solve the following problem: Present code in ```python```\nWrite a function to find the lateral surface area of a cube given its side length.\n>>> assert lateralsurface_cube(5)==100\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","136":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `square_Sum(n)` to solve the following problem: Present code in ```python```\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n>>> assert square_Sum(2) == 10\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","137":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_star_num(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the n'th star number.\n>>> assert find_star_num(3) == 37\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","138":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ascii_value(k)` to solve the following problem: Present code in ```python```\nWrite a function to find the ascii value of a character.\n>>> assert ascii_value('A')==65\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","139":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_even_and_even_index(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of even numbers at even positions of a list.\n>>> assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","140":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ven_Power_Sum(n)` to solve the following problem: Present code in ```python```\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n>>> assert even_Power_Sum(2) == 1056\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","141":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `rear_extract(test_list)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n>>> assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","142":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `substract_elements(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n>>> assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","143":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ven_binomial_Coeff_Sum(n)` to solve the following problem: Present code in ```python```\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n>>> assert even_binomial_Coeff_Sum(4) == 8\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","144":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `volume_cylinder(r, h)` to solve the following problem: Present code in ```python```\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n>>> assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","145":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ict_filter(dict, n)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n>>> assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","146":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_first_elements(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n>>> assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","147":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_num_decagonal(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth decagonal number.\n>>> assert is_num_decagonal(3) == 27\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","148":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sequential_search(dlist, item)` to solve the following problem: Present code in ```python```\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n>>> assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","149":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `all_unique(test_list)` to solve the following problem: Present code in ```python```\nWrite a python function to check if the elements of a given list are unique or not.\n>>> assert all_unique([1,2,3]) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","150":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sub_list(nums1, nums2)` to solve the following problem: Present code in ```python```\nWrite a function to subtract two lists element-wise.\n>>> assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","151":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `validate(n)` to solve the following problem: Present code in ```python```\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n>>> assert validate(1234) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","152":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_element(list, element)` to solve the following problem: Present code in ```python```\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n>>> assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","153":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `text_match_two_three(text)` to solve the following problem: Present code in ```python```\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n>>> assert text_match_two_three(\"ac\")==(False)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","154":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_sub_array_sum_repeated(a, n, k)` to solve the following problem: Present code in ```python```\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n>>> assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","155":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `square_Sum(n)` to solve the following problem: Present code in ```python```\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n>>> assert square_Sum(2) == 20\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","156":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_length(list1)` to solve the following problem: Present code in ```python```\nWrite a function to find the list of maximum length in a list of lists.\n>>> assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","157":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind(n, m)` to solve the following problem: Present code in ```python```\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n>>> assert find(10,3) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","158":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `otherside_rightangle(w, h)` to solve the following problem: Present code in ```python```\nWrite a function to find the third side of a right angled triangle.\n>>> assert otherside_rightangle(7,8)==10.63014581273465\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","159":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_val(listval)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum value in a given heterogeneous list.\n>>> assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","160":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_div(number)` to solve the following problem: Present code in ```python```\nWrite a function to return the sum of all divisors of a number.\n>>> assert sum_div(8)==7\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","161":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `get_Inv_Count(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to count inversions in an array.\n>>> assert get_Inv_Count([1,20,6,4,5]) == 5\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","162":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `latten_list(list1)` to solve the following problem: Present code in ```python```\nWrite a function to flatten a given nested list structure.\n>>> assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","163":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_aggregate(stdata)` to solve the following problem: Present code in ```python```\nWrite a function to calculate the maximum aggregate from the list of tuples.\n>>> assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","164":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_binary_seq(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n>>> assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","165":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ict_depth(d)` to solve the following problem: Present code in ```python```\nWrite a function to find the depth of a dictionary.\n>>> assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","166":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `start_withp(words)` to solve the following problem: Present code in ```python```\nWrite a function to return two words from a list of words starting with letter 'p'.\n>>> assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","167":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_sum_increasing_subseq(a, n, index, k)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n>>> assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","168":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `large_product(nums1, nums2, N)` to solve the following problem: Present code in ```python```\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n>>> assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","169":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `maximum(a, b)` to solve the following problem: Present code in ```python```\nWrite a python function to find the maximum of two numbers.\n>>> assert maximum(5,10) == 10\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","170":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `string_to_tuple(str1)` to solve the following problem: Present code in ```python```\nWrite a function to convert a given string to a tuple of characters.\n>>> assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","171":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `set_left_most_unset_bit(n)` to solve the following problem: Present code in ```python```\nWrite a python function to set the left most unset bit.\n>>> assert set_left_most_unset_bit(10) == 14\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","172":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `volume_cone(r, h)` to solve the following problem: Present code in ```python```\nWrite a function to find the volume of a cone.\n>>> assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","173":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `highest_Power_of_2(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n>>> assert highest_Power_of_2(10) == 8\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","174":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_lucas(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the n'th lucas number.\n>>> assert find_lucas(9) == 76\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","175":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `add_string(list_, string)` to solve the following problem: Present code in ```python```\nWrite a function to apply a given format string to all of the elements in a list.\n>>> assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","176":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `convert_list_dictionary(l1, l2, l3)` to solve the following problem: Present code in ```python```\nWrite a function to convert more than one list to nested dictionary.\n>>> assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","177":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `get_max_sum(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5)), n).\n>>> assert get_max_sum(60) == 106\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","178":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_distinct(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to check if given tuple contains no duplicates.\n>>> assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","179":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `irst_non_repeating_character(str1)` to solve the following problem: Present code in ```python```\nWrite a python function to find the first non-repeated character in a given string.\n>>> assert first_non_repeating_character(\"abcabc\") == None\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","180":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_char(string)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given string starts and ends with the same character or not.\n>>> assert check_char(\"abba\") == \"Valid\"\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","181":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `median_numbers(a, b, c)` to solve the following problem: Present code in ```python```\nWrite a function to find the median of three numbers.\n>>> assert median_numbers(25,55,65)==55.0\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","182":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_of_digits(nums)` to solve the following problem: Present code in ```python```\nWrite a function to compute the sum of digits of each number of a given list.\n>>> assert sum_of_digits([10,2,56])==14\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","183":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_freq(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to extract the number of unique tuples in the given list.\n>>> assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","184":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `minimum(a, b)` to solve the following problem: Present code in ```python```\nWrite a python function to find the minimum of two numbers.\n>>> assert minimum(1,2) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","185":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_tuplex(tuplex, tuple1)` to solve the following problem: Present code in ```python```\nWrite a function to check whether an element exists within a tuple.\n>>> assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","186":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_Parity(x)` to solve the following problem: Present code in ```python```\nWrite a python function to find whether the parity of a given number is odd.\n>>> assert find_Parity(12) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","187":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `rearrange_bigger(n)` to solve the following problem: Present code in ```python```\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n>>> assert rearrange_bigger(12)==21\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","188":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `min_product_tuple(list1)` to solve the following problem: Present code in ```python```\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n>>> assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","189":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `min_val(listval)` to solve the following problem: Present code in ```python```\nWrite a function to find the minimum value in a given heterogeneous list.\n>>> assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","190":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_odd(l)` to solve the following problem: Present code in ```python```\nWrite a python function to remove odd numbers from a given list.\n>>> assert remove_odd([1,2,3]) == [2]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","191":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_nth_element(list1, n)` to solve the following problem: Present code in ```python```\nWrite a function to extract the nth element from a given list of tuples.\n>>> assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","192":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `overlapping(list1, list2)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n>>> assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","193":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_Product(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find a pair with highest product from a given array of integers.\n>>> assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","194":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Find_Max(lst)` to solve the following problem: Present code in ```python```\nWrite a python function to find the element of a list having maximum length.\n>>> assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","195":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `round_and_sum(list1)` to solve the following problem: Present code in ```python```\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n>>> assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","196":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `cube_Sum(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the cube sum of first n even natural numbers.\n>>> assert cube_Sum(2) == 72\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","197":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `concatenate_tuple(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to concatenate each element of tuple by the delimiter.\n>>> assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","198":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_Average_Of_Cube(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the average of cubes of first n natural numbers.\n>>> assert find_Average_Of_Cube(2) == 4.5\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","199":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_rear(test_tuple)` to solve the following problem: Present code in ```python```\nWrite a function to extract only the rear index element of each string in the given tuple.\n>>> assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","200":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_element_in_list(list1, x)` to solve the following problem: Present code in ```python```\nWrite a function to count the number of sublists containing a particular element.\n>>> assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","201":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ilter_oddnumbers(nums)` to solve the following problem: Present code in ```python```\nWrite a function to filter odd numbers.\n>>> assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","202":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `change_date_format(dt)` to solve the following problem: Present code in ```python```\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n>>> assert change_date_format(\"2026-01-02\") == '02-01-2026'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","203":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `shell_sort(my_list)` to solve the following problem: Present code in ```python```\nWrite a function to sort the given array by using shell sort.\n>>> assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","204":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `and_tuples(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function to extract the elementwise and tuples from the given two tuples.\n>>> assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","205":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `parabola_directrix(a, b, c)` to solve the following problem: Present code in ```python```\nWrite a function to find the directrix of a parabola.\n>>> assert parabola_directrix(5,3,2)==-198\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","206":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `common_element(list1, list2)` to solve the following problem: Present code in ```python```\nWrite a function that takes two lists and returns true if they have at least one common element.\n>>> assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","207":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `median_trapezium(base1, base2, height)` to solve the following problem: Present code in ```python```\nWrite a function to find the median length of a trapezium.\n>>> assert median_trapezium(15,25,35)==20\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","208":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_greater(arr, number)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the entered number is greater than the elements of the given array.\n>>> assert check_greater([1, 2, 3, 4, 5], 4) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","209":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `last_Digit(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the last digit of a given number.\n>>> assert last_Digit(123) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","210":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `neg_nos(list1)` to solve the following problem: Present code in ```python```\nWrite a python function to return the negative numbers in a list.\n>>> assert neg_nos([-1,4,5,-6]) == [-1,-6]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","211":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_odd(str1)` to solve the following problem: Present code in ```python```\nWrite a function to remove odd characters in a string.\n>>> assert remove_odd(\"python\")==(\"yhn\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","212":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_bidirectional(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to count bidirectional tuple pairs.\n>>> assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","213":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `multiple_to_single(L)` to solve the following problem: Present code in ```python```\nWrite a function to join a list of multiple integers into a single integer.\n>>> assert multiple_to_single([11, 33, 50])==113350\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","214":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_adverb_position(text)` to solve the following problem: Present code in ```python```\nWrite a function to find the first adverb and their positions in a given sentence.\n>>> assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","215":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `surfacearea_cube(l)` to solve the following problem: Present code in ```python```\nWrite a function to find the surface area of a cube of a given size.\n>>> assert surfacearea_cube(5)==150\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","216":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `positive_count(nums)` to solve the following problem: Present code in ```python```\nWrite a function to find the ration of positive numbers in an array of integers.\n>>> assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","217":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `index_multiplication(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n>>> assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","218":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_Occurrence(tup, lst)` to solve the following problem: Present code in ```python```\nWrite a python function to count the occurence of all elements of list in a tuple.\n>>> assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","219":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `cube_nums(nums)` to solve the following problem: Present code in ```python```\nWrite a function to find cubes of individual elements in a list.\n>>> assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","220":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `cal_sum(n)` to solve the following problem: Present code in ```python```\nWrite a function to calculate the sum of perrin numbers.\n>>> assert cal_sum(9) == 49\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","221":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_string(str, l)` to solve the following problem: Present code in ```python```\nWrite a function to extract specified size of strings from a given list of string values.\n>>> assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","222":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_whitespaces(text1)` to solve the following problem: Present code in ```python```\nWrite a function to remove all whitespaces from the given string.\n>>> assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","223":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sumofFactors(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of even factors of a number.\n>>> assert sumofFactors(18) == 26\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","224":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `text_match_wordz(text)` to solve the following problem: Present code in ```python```\nWrite a function that matches a word containing 'z'.\n>>> assert text_match_wordz(\"pythonz.\")==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","225":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_monthnumb_number(monthnum2)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given month number contains 31 days or not.\n>>> assert check_monthnumb_number(5)==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","226":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `reverse_string_list(stringlist)` to solve the following problem: Present code in ```python```\nWrite a function to reverse each string in a given list of string values.\n>>> assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","227":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Find_Min(lst)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sublist having minimum length.\n>>> assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","228":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `rectangle_area(l, b)` to solve the following problem: Present code in ```python```\nWrite a function to find the area of a rectangle.\n>>> assert rectangle_area(10,20)==200\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","229":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_uppercase(str1)` to solve the following problem: Present code in ```python```\nWrite a function to remove uppercase substrings from a given string.\n>>> assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","230":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Extract(lst)` to solve the following problem: Present code in ```python```\nWrite a python function to get the first element of each sublist.\n>>> assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","231":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `upper_ctr(str)` to solve the following problem: Present code in ```python```\nWrite a python function to count the upper case characters in a given string.\n>>> assert upper_ctr('PYthon') == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","232":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `combinations_list(list1)` to solve the following problem: Present code in ```python```\nWrite a function to find all possible combinations of the elements of a given list.\n>>> assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","233":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_subarray_product(arr)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum product subarray of the given array.\n>>> assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","234":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `rop_empty(dict1)` to solve the following problem: Present code in ```python```\nWrite a function to drop empty items from a given dictionary.\n>>> assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","235":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_product(arr)` to solve the following problem: Present code in ```python```\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n>>> assert max_product([3, 100, 4, 5, 150, 6]) == 3000\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","236":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `add_pairwise(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n>>> assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","237":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_remainder(arr, n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the product of the array multiplication modulo n.\n>>> assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","238":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_Consecutive(l)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the given list contains consecutive numbers or not.\n>>> assert check_Consecutive([1,2,3,4,5]) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","239":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tuple_intersection(test_list1, test_list2)` to solve the following problem: Present code in ```python```\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n>>> assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","240":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `replace_char(str1, ch, newch)` to solve the following problem: Present code in ```python```\nWrite a function to replace characters in a string.\n>>> assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","241":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sort_counter(dict1)` to solve the following problem: Present code in ```python```\nWrite a function to sort a dictionary by value.\n>>> assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","242":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `big_sum(nums)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of the largest and smallest value in a given array.\n>>> assert big_sum([1,2,3]) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","243":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_lower(string)` to solve the following problem: Present code in ```python```\nWrite a python function to convert the given string to lower case.\n>>> assert is_lower(\"InValid\") == \"invalid\"\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","244":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_lowercase(str1)` to solve the following problem: Present code in ```python```\nWrite a function to remove lowercase substrings from a given string.\n>>> assert remove_lowercase(\"PYTHon\")==('PYTH')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","245":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `irst_Digit(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the first digit of a given number.\n>>> assert first_Digit(123) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","246":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Split(list)` to solve the following problem: Present code in ```python```\nWrite a python function which takes a list of integers and only returns the odd ones.\n>>> assert Split([1,2,3,4,5,6]) == [1,3,5]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","247":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ifference(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n>>> assert difference(3) == 30\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","248":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_Odd_Pair(A, N)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of pairs whose xor value is odd.\n>>> assert find_Odd_Pair([5,4,7,2,1],5) == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","249":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `toggle_string(string)` to solve the following problem: Present code in ```python```\nWrite a function to toggle the case of all characters in a string.\n>>> assert toggle_string(\"Python\")==(\"pYTHON\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","250":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `igit_distance_nums(n1, n2)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of the per-digit difference between two integers.\n>>> assert digit_distance_nums(1,2) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","251":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_sub_array_sum(a, size)` to solve the following problem: Present code in ```python```\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n>>> assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","252":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `union_elements(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n>>> assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","253":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Find_Max_Length(lst)` to solve the following problem: Present code in ```python```\nWrite a python function to find the length of the longest sublists.\n>>> assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","254":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_values(text)` to solve the following problem: Present code in ```python```\nWrite a function to extract values between quotation marks from a string.\n>>> assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","255":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_Pairs(arr, n)` to solve the following problem: Present code in ```python```\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n>>> assert count_Pairs([1,2,1],3) == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","256":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `split(word)` to solve the following problem: Present code in ```python```\nWrite a python function to split a string into characters.\n>>> assert split('python') == ['p','y','t','h','o','n']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","257":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_digits(n)` to solve the following problem: Present code in ```python```\nWrite a function to get the sum of the digits of a non-negative integer.\n>>> assert sum_digits(345)==12\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","258":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `issort_list(list1)` to solve the following problem: Present code in ```python```\nWrite a function to check whether a specified list is sorted or not.\n>>> assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","259":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `mpty_list(length)` to solve the following problem: Present code in ```python```\nWrite a function to create a list of N empty dictionaries.\n>>> assert empty_list(5)==[{},{},{},{},{}]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","260":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sort_sublists(list1)` to solve the following problem: Present code in ```python```\nWrite a function to sort each sublist of strings in a given list of lists.\n>>> assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","261":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `two_unique_nums(nums)` to solve the following problem: Present code in ```python```\nWrite a python function to remove duplicate numbers from a given number of lists.\n>>> assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","262":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `unique_product(list_data)` to solve the following problem: Present code in ```python```\nWrite a python function to calculate the product of the unique numbers in a given list.\n>>> assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","263":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `surfacearea_cylinder(r, h)` to solve the following problem: Present code in ```python```\nWrite a function to find the surface area of a cylinder.\n>>> assert surfacearea_cylinder(10,5)==942.45\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","264":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_Sub_Array(A, B)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether a list is sublist of another or not.\n>>> assert is_Sub_Array([1,4,3,5],[1,2]) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","265":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `last_Digit_Factorial(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the last digit in factorial of a given number.\n>>> assert last_Digit_Factorial(4) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","266":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `interleave_lists(list1, list2, list3)` to solve the following problem: Present code in ```python```\nWrite a function to interleave 3 lists of the same length into a single flat list.\n>>> assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","267":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_dissimilar(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function to find the dissimilar elements in the given two tuples.\n>>> assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","268":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ven_ele(test_tuple, even_fnc)` to solve the following problem: Present code in ```python```\nWrite a function to remove uneven elements in the nested mixed tuple.\n>>> assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","269":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `surface_Area(b, s)` to solve the following problem: Present code in ```python```\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n>>> assert surface_Area(3,4) == 33\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","270":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `my_dict(dict1)` to solve the following problem: Present code in ```python```\nWrite a function to check if a dictionary is empty\n>>> assert my_dict({10})==False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","271":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `catalan_number(num)` to solve the following problem: Present code in ```python```\nWrite a function which returns nth catalan number.\n>>> assert catalan_number(10)==16796\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","272":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xpensive_items(items, n)` to solve the following problem: Present code in ```python```\nWrite a function to find the n most expensive items in a given dataset.\n>>> assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","273":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `split_Arr(l, n)` to solve the following problem: Present code in ```python```\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n>>> assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","274":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `list_tuple(listx)` to solve the following problem: Present code in ```python```\nWrite a function to convert a list to a tuple.\n>>> assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","275":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `big_diff(nums)` to solve the following problem: Present code in ```python```\nWrite a python function to find the difference between largest and smallest value in a given list.\n>>> assert big_diff([1,2,3,4]) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","276":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `perfect_squares(a, b)` to solve the following problem: Present code in ```python```\nWrite a function to find perfect squares between two given numbers.\n>>> assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","277":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `polar_rect(x, y)` to solve the following problem: Present code in ```python```\nWrite a function to convert polar coordinates to rectangular coordinates.\n>>> assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","278":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `swap_List(newList)` to solve the following problem: Present code in ```python```\nWrite a python function to interchange the first and last elements in a list.\n>>> assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","279":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `binomial_Coeff(n, k)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n>>> assert sum_Of_product(3) == 15\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","280":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `removezero_ip(ip)` to solve the following problem: Present code in ```python```\nWrite a function to remove leading zeroes from an ip address.\n>>> assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","281":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `iff_even_odd(list1)` to solve the following problem: Present code in ```python```\nWrite a function to find the difference of the first even and first odd number of a given list.\n>>> assert diff_even_odd([1,3,5,7,4,1,6,8])==3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","282":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `min_Swaps(str1, str2)` to solve the following problem: Present code in ```python```\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n>>> assert min_Swaps(\"1101\",\"1110\") == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","283":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tuple_size(tuple_list)` to solve the following problem: Present code in ```python```\nWrite a function to find the size in bytes of the given tuple.\n>>> assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","284":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_kth(arr1, arr2, k)` to solve the following problem: Present code in ```python```\nWrite a function to find kth element from the given two sorted arrays.\n>>> assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","285":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `armstrong_number(number)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given number is armstrong or not.\n>>> assert armstrong_number(153)==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","286":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_average(number)` to solve the following problem: Present code in ```python```\nWrite a function to find sum and average of first n natural numbers.\n>>> assert sum_average(10)==(55, 5.5)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","287":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_Even(n)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the given number is even or not.\n>>> assert is_Even(1) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","288":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `irst_repeated_char(str1)` to solve the following problem: Present code in ```python```\nWrite a python function to find the first repeated character in a given string.\n>>> assert first_repeated_char(\"abcabc\") == \"a\"\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","289":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `get_ludic(n)` to solve the following problem: Present code in ```python```\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n>>> assert get_ludic(10) == [1, 2, 3, 5, 7]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","290":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `reverse_words(s)` to solve the following problem: Present code in ```python```\nWrite a function to reverse words seperated by spaces in a given string.\n>>> assert reverse_words(\"python program\")==(\"program python\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","291":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `prime_num(num)` to solve the following problem: Present code in ```python```\nWrite a function to check if the given integer is a prime number.\n>>> assert prime_num(13)==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","292":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `radian_degree(degree)` to solve the following problem: Present code in ```python```\nWrite a function to convert degrees to radians.\n>>> assert radian_degree(90)==1.5707963267948966\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","293":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_literals(text, pattern)` to solve the following problem: Present code in ```python```\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n>>> assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","294":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `bell_Number(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find nth bell number.\n>>> assert bell_Number(2) == 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","295":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_kth_element(list1, L)` to solve the following problem: Present code in ```python```\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n>>> assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","296":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_of_nth(test_list, N)` to solve the following problem: Present code in ```python```\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n>>> assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","297":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `merge(lst)` to solve the following problem: Present code in ```python```\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n>>> assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","298":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `cummulative_sum(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n>>> assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","299":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `average_tuple(nums)` to solve the following problem: Present code in ```python```\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n>>> assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","300":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tuple_modulo(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n>>> assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","301":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `iv_list(nums1, nums2)` to solve the following problem: Present code in ```python```\nWrite a function to divide two lists element wise.\n>>> assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","302":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `move_num(test_str)` to solve the following problem: Present code in ```python```\nWrite a function to move all the numbers to the end of the given string.\n>>> assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","303":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `largest_subset(a)` to solve the following problem: Present code in ```python```\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n>>> assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","304":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `get_median(arr1, arr2, n)` to solve the following problem: Present code in ```python```\nWrite a function to find the median of two sorted lists of same size.\n>>> assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","305":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `nth_nums(nums, n)` to solve the following problem: Present code in ```python```\nWrite a function to compute the n-th power of each number in a list.\n>>> assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","306":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_upper(string)` to solve the following problem: Present code in ```python```\nWrite a python function to convert a given string to uppercase.\n>>> assert is_upper(\"person\") ==\"PERSON\"\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","307":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `triangle_area(r)` to solve the following problem: Present code in ```python```\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n>>> assert triangle_area(-1) == None\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","308":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `replace_spaces(string)` to solve the following problem: Present code in ```python```\nWrite a function to replace all spaces in the given string with '%20'.\n>>> assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","309":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Split(list)` to solve the following problem: Present code in ```python```\nWrite a python function to find even numbers from a list of numbers.\n>>> assert Split([1,2,3,4,5]) == [2,4]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","310":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `adjac(ele, sub=[])` to solve the following problem: Present code in ```python```\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n>>> assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","311":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `replace_spaces(text)` to solve the following problem: Present code in ```python```\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n>>> assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","312":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `move_zero(num_list)` to solve the following problem: Present code in ```python```\nWrite a python function to move all zeroes to the end of the given list.\n>>> assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","313":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `pair_xor_Sum(arr, n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n>>> assert pair_xor_Sum([5,9,7,6],4) == 47\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","314":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `heap_sort(iterable)` to solve the following problem: Present code in ```python```\nWrite a function to sort the given list.\n>>> assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","315":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `noprofit_noloss(actual_cost, sale_amount)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given amount has no profit and no loss\n>>> assert noprofit_noloss(1500,1200)==False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","316":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `wind_chill(v, t)` to solve the following problem: Present code in ```python```\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\n>>> assert wind_chill(120,35)==40\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","317":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sample_nam(sample_names)` to solve the following problem: Present code in ```python```\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n>>> assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","318":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_parenthesis(items)` to solve the following problem: Present code in ```python```\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n>>> assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","319":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_nonagonal(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth nonagonal number.\n>>> assert is_nonagonal(10) == 325\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","320":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `text_match_wordz_middle(text)` to solve the following problem: Present code in ```python```\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n>>> assert text_match_wordz_middle(\"pythonzabc.\")==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","321":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `reverse_Array_Upto_K(input, k)` to solve the following problem: Present code in ```python```\nWrite a python function to reverse an array upto a given position.\n>>> assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","322":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `add_dict_to_tuple(test_tup, test_dict)` to solve the following problem: Present code in ```python```\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n>>> assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","323":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `maxAverageOfPath(cost)` to solve the following problem: Present code in ```python```\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n>>> assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","324":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ilter_data(students, h, w)` to solve the following problem: Present code in ```python```\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n>>> assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","325":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_same_pair(nums1, nums2)` to solve the following problem: Present code in ```python```\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n>>> assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","326":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `power_base_sum(base, power)` to solve the following problem: Present code in ```python```\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n>>> assert power_base_sum(2,100)==115\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","327":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_quotation(text1)` to solve the following problem: Present code in ```python```\nWrite a function to extract values between quotation marks \" \" of the given string.\n>>> assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","328":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `multiply_elements(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n>>> assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","329":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_list(lst1, lst2)` to solve the following problem: Present code in ```python```\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n>>> assert sum_list([10,20,30],[15,25,35])==[25,45,65]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","330":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `consecutive_duplicates(nums)` to solve the following problem: Present code in ```python```\nWrite a function to remove consecutive duplicates of a given list.\n>>> assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","331":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `lateralsurface_cone(r, h)` to solve the following problem: Present code in ```python```\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n>>> assert lateralsurface_cone(5,12)==204.20352248333654\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","332":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `replace_specialchar(text)` to solve the following problem: Present code in ```python```\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n>>> assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","333":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_first_occurrence(A, x)` to solve the following problem: Present code in ```python```\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n>>> assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","334":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_Of_Subarray_Prod(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find sum of products of all possible sublists of a given list.\n>>> assert sum_Of_Subarray_Prod([1,2,3]) == 20\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","335":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `set_middle_bits(n)` to solve the following problem: Present code in ```python```\nWrite a python function to toggle bits of the number except the first and the last bit.\n>>> assert toggle_middle_bits(9) == 15\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","336":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `left_insertion(a, x)` to solve the following problem: Present code in ```python```\nWrite a function to locate the left insertion point for a specified value in sorted order.\n>>> assert left_insertion([1,2,4,5],6)==4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","337":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_str(string)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n>>> assert check_str(\"annie\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","338":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_Index(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the index of smallest triangular number with n digits.\n>>> assert find_Index(2) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","339":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tuple_to_dict(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\n>>> assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","340":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `all_Characters_Same(s)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether all the characters are same or not.\n>>> assert all_Characters_Same(\"python\") == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","341":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `area_tetrahedron(side)` to solve the following problem: Present code in ```python```\nWrite a function to caluclate the area of a tetrahedron.\n>>> assert area_tetrahedron(3)==15.588457268119894\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","342":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `rotate_right(list, m)` to solve the following problem: Present code in ```python```\nWrite a function to rotate a given list by specified number of items to the right direction.\n>>> assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","343":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_none(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to check if the given tuple has any none value or not.\n>>> assert check_none((10, 4, 5, 6, None)) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","344":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ivisible_by_digits(startnum, endnum)` to solve the following problem: Present code in ```python```\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n>>> assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","345":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sector_area(r, a)` to solve the following problem: Present code in ```python```\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n>>> assert sector_area(4,45)==6.283185307179586\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","346":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `capital_words_spaces(str1)` to solve the following problem: Present code in ```python```\nWrite a function to put spaces between words starting with capital letters in a given string.\n>>> assert capital_words_spaces(\"Python\") == 'Python'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","347":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sort_numeric_strings(nums_str)` to solve the following problem: Present code in ```python```\nWrite a function to sort a given list of strings of numbers numerically.\n>>> assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","348":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `add_tuple(test_list, test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to add the given tuple to the given list.\n>>> assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","349":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_min_heap_helper(arr, i)` to solve the following problem: Present code in ```python```\nWrite a function to check if the given array represents min heap or not.\n>>> assert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","350":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `jacobsthal_num(n)` to solve the following problem: Present code in ```python```\nWrite a function to find the nth jacobsthal number.\n>>> assert jacobsthal_num(5) == 11\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","351":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `min_k(test_list, K)` to solve the following problem: Present code in ```python```\nWrite a function to find minimum k records from tuple list.\n>>> assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","352":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `xtract_index_list(l1, l2, l3)` to solve the following problem: Present code in ```python```\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n>>> assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","353":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `second_smallest(numbers)` to solve the following problem: Present code in ```python```\nWrite a function to find the second smallest number in a list.\n>>> assert second_smallest([1, 2, -8, -2, 0, -2])==-2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","354":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_reverse_pairs(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to count the pairs of reverse strings in the given string list.\n>>> assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","355":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `unique_sublists(list1)` to solve the following problem: Present code in ```python```\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n>>> assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","356":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_decimal(num)` to solve the following problem: Present code in ```python```\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n>>> assert is_decimal('123.11')==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","357":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `unique_Element(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n>>> assert unique_Element([1,1,1]) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","358":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_monthnumber_number(monthnum3)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n>>> assert check_monthnumber_number(6)==True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","359":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_min_diff(arr, n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the minimum difference between any two elements in a given array.\n>>> assert find_min_diff((1,5,3,19,18,25),6) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","360":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `number_ctr(str)` to solve the following problem: Present code in ```python```\nWrite a python function to count number of digits in a given string.\n>>> assert number_ctr('program2bedone') == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","361":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_polite(n)` to solve the following problem: Present code in ```python```\nWrite a function to find nth polite number. geeksforgeeks.org\/n-th-polite-number\/\n>>> assert is_polite(7) == 11\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","362":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `pair_wise(l1)` to solve the following problem: Present code in ```python```\nWrite a function to return a list of all pairs of consecutive items in a given list.\n>>> assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","363":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `get_pairs_count(arr, sum)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n>>> assert get_pairs_count([1,1,1,1],2) == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","364":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `Diff(li1, li2)` to solve the following problem: Present code in ```python```\nWrite a python function to get the difference between two lists.\n>>> assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","365":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `odd_num_sum(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n>>> assert odd_num_sum(2) == 82\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","366":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_expression(exp)` to solve the following problem: Present code in ```python```\nWrite a function to check if the given expression is balanced or not.\n>>> assert check_expression(\"{()}[{}]\") == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","367":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_length(test_str, K)` to solve the following problem: Present code in ```python```\nWrite a function to remove all the words with k length in the given string.\n>>> assert remove_length('The person is most value tet', 3) == 'person is most value'\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","368":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `occurance_substring(text, pattern)` to solve the following problem: Present code in ```python```\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n>>> assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","369":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `odd_position(nums)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n>>> assert odd_position([2,1,4,3,6,7,6,3]) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","370":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_sum(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of non-repeated elements in a given list.\n>>> assert find_sum([1,2,3,1,1,4,5,6]) == 21\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","371":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `pack_consecutive_duplicates(list1)` to solve the following problem: Present code in ```python```\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n>>> assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","372":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ind_combinations(test_list)` to solve the following problem: Present code in ```python```\nWrite a function to find the combinations of sums with tuples in the given tuple list.\n>>> assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","373":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_divisors(n)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether the count of divisors is even.\n>>> assert count_divisors(10)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","374":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `odd_length_sum(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of all odd length subarrays.\n>>> assert odd_length_sum([1,2,4]) == 14\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","375":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `rgb_to_hsv(r, g, b)` to solve the following problem: Present code in ```python```\nWrite a function to convert rgb color to hsv color.\n>>> assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","376":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `mul_even_odd(list1)` to solve the following problem: Present code in ```python```\nWrite a function to find the product of first even and odd number of a given list.\n>>> assert mul_even_odd([1,3,5,7,4,1,6,8])==4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","377":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `tuple_str_int(test_str)` to solve the following problem: Present code in ```python```\nWrite a function to convert tuple string to integer tuple.\n>>> assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","378":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `right_insertion(a, x)` to solve the following problem: Present code in ```python```\nWrite a function to locate the right insertion point for a specified value in sorted order.\n>>> assert right_insertion([1,2,4,5],6)==4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","379":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `text_match_three(text)` to solve the following problem: Present code in ```python```\nWrite a function that matches a string that has an a followed by three 'b'.\n>>> assert not text_match_three(\"ac\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","380":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `new_tuple(test_list, test_str)` to solve the following problem: Present code in ```python```\nWrite a function to create a new tuple from the given string and list.\n>>> assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","381":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `ven_position(nums)` to solve the following problem: Present code in ```python```\nWrite a python function to check whether every even index contains even numbers of a given list.\n>>> assert even_position([3,2,1]) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","382":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_nested(test_tup)` to solve the following problem: Present code in ```python```\nWrite a function to remove tuples from the given tuple.\n>>> assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","383":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `count_list(input_list)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of lists in a given number of lists.\n>>> assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","384":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `last(arr, x)` to solve the following problem: Present code in ```python```\nWrite a python function to find the last position of an element in a sorted array.\n>>> assert last([1,2,3],1) == 0\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","385":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `text_starta_endb(text)` to solve the following problem: Present code in ```python```\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n>>> assert text_starta_endb(\"aabbbb\")\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","386":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `return_sum(dict)` to solve the following problem: Present code in ```python```\nWrite function to find the sum of all items in the given dictionary.\n>>> assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","387":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `sum_odd(n)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n>>> assert sum_in_range(2,5) == 8\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","388":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `_sum(arr)` to solve the following problem: Present code in ```python```\nWrite a python function to find the sum of an array.\n>>> assert _sum([1, 2, 3]) == 6\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","389":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `left_rotate(n, d)` to solve the following problem: Present code in ```python```\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n>>> assert left_rotate(16,2) == 64\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","390":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `remove_all_spaces(text)` to solve the following problem: Present code in ```python```\nWrite a function to remove all whitespaces from a string.\n>>> assert remove_all_spaces('python  program')==('pythonprogram')\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","391":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `test_three_equal(x, y, z)` to solve the following problem: Present code in ```python```\nWrite a python function to count the number of equal numbers from three given integers.\n>>> assert test_three_equal(1,1,1) == 3\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","392":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_perfect_square(n)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the given number is a perfect square or not.\n>>> assert not is_perfect_square(10)\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","393":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `is_product_even(arr)` to solve the following problem: Present code in ```python```\nWrite a function to check whether the product of numbers in a list is even or not.\n>>> assert is_product_even([1,2,3])\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","394":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_sum_list(lists)` to solve the following problem: Present code in ```python```\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n>>> assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","395":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `max_run_uppercase(test_str)` to solve the following problem: Present code in ```python```\nWrite a function to find maximum run of uppercase characters in the given string.\n>>> assert max_run_uppercase('GeMKSForGERksISBESt') == 5\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","396":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `irst_odd(nums)` to solve the following problem: Present code in ```python```\nWrite a python function to find the first odd number in a given list of numbers.\n>>> assert first_odd([1,3,5]) == 1\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","397":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_K(test_tup, K)` to solve the following problem: Present code in ```python```\nWrite a function to check if the given tuples contain the k or not.\n>>> assert check_K((10, 4, 5, 6, 8), 6) == True\n<|im_end|>\n<|im_start|>assistant\n```python\ndef","398":"<|im_start|>system\nYou are a helpful and harmless assistant. You are Qwen developed by Alibaba. You should think step-by-step.<|im_end|>\n<|im_start|>user\nWrite Python code to solve the task.\nWrite a Python function `check_smaller(test_tup1, test_tup2)` to solve the following problem: Present code in ```python```\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n>>> assert check_smaller((1, 2, 3), (2, 3, 4)) == False\n<|im_end|>\n<|im_start|>assistant\n```python\ndef"},"code":{"0":"def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ","1":"import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result","2":"import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums","3":"def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)","4":"import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))","5":"def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums","6":"def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ","7":"def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ","8":"def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result","9":"def find_Volume(l,b,h) : \n    return ((l * b * h) \/ 2) ","10":"import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False","11":"def square_perimeter(a):\n  perimeter=4*a\n  return perimeter","12":"NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ","13":"def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ","14":"def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x\/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False","15":"def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num \/\/ 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ","16":"def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ","17":"def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ","18":"def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ","19":"from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count","20":"def smallest_num(xs):\n  return min(xs)\n","21":"def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ","22":"def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks","23":"def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total","24":"def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ","25":"def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ","26":"def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","27":"def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set","28":"def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1","29":"def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) \/ shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums","30":"def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False","31":"def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True","32":"def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res","33":"def is_Diff(n): \n    return (n % 11 == 0) ","34":"def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False","35":"def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) \/ 6","36":"import math\ndef volume_sphere(r):\n  volume=(4\/3)*math.pi*r*r*r\n  return volume","37":"def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)","38":"def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))","39":"import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea","40":"def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1","41":"import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict","42":"import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count","43":"def closest_num(N):\n  return (N - 1)","44":"def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max","45":"def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False","46":"def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True","47":"def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)","48":"from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ","49":"def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ","50":"def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x","51":"def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n","52":"def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total\/len(numbers) ","53":"def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ","54":"import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i","55":"def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]","56":"def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))","57":"def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","58":"def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n","59":"def count(lst):   \n    return sum(lst) ","60":"def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ","61":"import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)","62":"def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ","63":"def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result","64":"def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False","65":"def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit","66":"def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result","67":"def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res","68":"def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst","69":"def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)","70":"def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max","71":"def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)","72":"import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle","73":"def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0","74":"def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum","75":"def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)","76":"def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t","77":"def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True","78":"from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]","79":"def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string","80":"def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str","81":"def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)","82":"def hexagonal_num(n): \n\treturn n*(2*n - 1) ","83":"from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1\/(n-n1)","84":"def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True","85":"def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter","86":"def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ","87":"def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums","88":"def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result","89":"def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ","90":"def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ","91":"def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) \/\/ b)\n\t\ti = i + 1\n\treturn None","92":"def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result","93":"def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)","94":"import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n \/ i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ","95":"def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ","96":"def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count","97":"def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ","98":"def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ","99":"def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ","100":"import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter","101":"def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count","102":"def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ","103":"def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n\/\/2) <= (n -1)) and arr[i + n\/\/2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)\/\/2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1","104":"def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ","105":"def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result","106":"def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ","107":"def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr","108":"def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2","109":"import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest","110":"def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface","111":"def volume_cube(l):\n  volume = l * l * l\n  return volume","112":"def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ","113":"from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ","114":"def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) \/ 2); ","115":"def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i\/\/2][j-1] \n\treturn T[m][n]","116":"def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n","117":"def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total","118":"import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ","119":"def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum","120":"def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]","121":"def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result","122":"def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ","123":"def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list","124":"import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ","125":"def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr","126":"from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n","127":"def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr","128":"def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)","129":"def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ","130":"def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)","131":"def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 \/\/ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ","132":"def split_two_parts(list1, L):\n    return list1[:L], list1[L:]","133":"def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age","134":"def list_split(S, step):\n    return [S[i::step] for i in range(step)]","135":"def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA","136":"def square_Sum(n):  \n    return int(n*(4*n*n-1)\/3) ","137":"def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ","138":"def ascii_value(k):\n  ch=k\n  return ord(ch)","139":"def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum","140":"def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ","141":"def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ","142":"def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ","143":"import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ","144":"def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume","145":"def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result","146":"def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ","147":"def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ","148":"def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos","149":"def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True","150":"def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)","151":"def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp \/\/= 10; \n    return True","152":"def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element","153":"import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False","154":"def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far","155":"def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)\/3)","156":"def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)","157":"def find(n,m):  \n    q = n\/\/m \n    return (q)","158":"import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s","159":"def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)","160":"def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)","161":"def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ","162":"def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ","163":"from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])","164":"def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) \/ r \n\t\tres += nCr * nCr \n\treturn res ","165":"def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0","166":"import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()","167":"def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]","168":"def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result","169":"def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ","170":"def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result","171":"def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ","172":"import math\ndef volume_cone(r,h):\n  volume = (1.0\/3) * math.pi * r * r * h\n  return volume","173":"def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ","174":"def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ","175":"def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string","176":"def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result","177":"def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i \/ 2)] \n\t\t\t\t\t\t+ res[int(i \/ 3)] +\n\t\t\t\t\t\t\tres[int(i \/ 4)]\n\t\t\t\t\t\t+ res[int(i \/ 5)])))\n\t\ti = i + 1\n\treturn res[n]","178":"def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ","179":"def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None","180":"import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ","181":"def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median","182":"def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","183":"def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)","184":"def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ","185":"def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False","186":"def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False","187":"def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False","188":"def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min","189":"def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val","190":"def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l","191":"def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result","192":"def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False","193":"def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ","194":"def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList","195":"def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum","196":"def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum","197":"def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ","198":"def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum \/ n, 6) ","199":"def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ","200":"def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr","201":"def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums","202":"import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)","203":"def shell_sort(my_list):\n    gap = len(my_list) \/\/ 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap \/\/= 2\n\n    return my_list","204":"def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ","205":"def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix","206":"def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result","207":"def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median","208":"def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]","209":"def last_Digit(n) :\n    return (n % 10) ","210":"def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ","211":"def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2","212":"def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res","213":"def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x","214":"import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))","215":"def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea","216":"from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1\/n,2)","217":"def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ","218":"from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ","219":"def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums","220":"def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum","221":"def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result","222":"import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))","223":"import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n \/\/ i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res","224":"import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False","225":"def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False","226":"def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result","227":"def Find_Min(lst): \n    return min(lst, key=len) ","228":"def rectangle_area(l,b):\n  area=l*b\n  return area","229":"import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)","230":"def Extract(lst): \n    return [item[0] for item in lst] ","231":"def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr","232":"def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result","233":"def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far","234":"def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1","235":"def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)","236":"def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ","237":"def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ","238":"def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ","239":"def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)","240":"def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2","241":"from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter","242":"def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum","243":"def is_lower(string):\n  return (string.lower())","244":"import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)","245":"def first_Digit(n) :  \n    while n >= 10:  \n        n = n \/ 10 \n    return int(n) ","246":"def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li","247":"def difference(n) :  \n    S = (n*(n + 1))\/\/2;  \n    res = S*(S-1);  \n    return res;  ","248":"def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ","249":"def toggle_string(string):\n string1 = string.swapcase()\n return string1","250":"def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))","251":"def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far","252":"def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ","253":"def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength ","254":"import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))","255":"def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ","256":"def split(word): \n    return [char for char in word] ","257":"def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n \/ 10))","258":"def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result","259":"def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list","260":"def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result","261":"def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]","262":"def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p","263":"def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea","264":"def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ","265":"def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0","266":"def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result","267":"def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ","268":"def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ","269":"def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) ","270":"def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True","271":"def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num","272":"import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items","273":"def split_Arr(l, n):\n  return l[n:] + l[:n]","274":"def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex","275":"def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff","276":"def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists","277":"import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)","278":"def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ","279":"def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); ","280":"import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n","281":"def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)","282":"def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count \/\/ 2) \n    else : \n        return (\"Not Possible\") ","283":"import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) ","284":"def find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]","285":"def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp \/\/ 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp \/\/= 10\n if number == sum:\n           return True\n else:\n           return False","286":"def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total \/ number\n return (total,average)","287":"def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; ","288":"def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c","289":"def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics","290":"def reverse_words(s):\n        return ' '.join(reversed(s.split()))","291":"def prime_num(num):\n  if num >=1:\n   for i in range(2, num\/\/2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False","292":"import math\ndef radian_degree(degree):\n radian = degree*(math.pi\/180)\n return radian","293":"import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)","294":"def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ","295":"def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]","296":"def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) ","297":"def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] ","298":"def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)","299":"def average_tuple(nums):\n    result = [sum(x) \/ len(x) for x in zip(*nums)]\n    return result","300":"def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ","301":"def div_list(nums1,nums2):\n  result = map(lambda x, y: x \/ y, nums1, nums2)\n  return list(result)","302":"def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ","303":"def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)","304":"def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)\/2","305":"def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums","306":"def is_upper(string):\n  return (string.upper())","307":"def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r ","308":"def replace_spaces(string):\n  return string.replace(\" \", \"%20\")","309":"def Split(list): \n    return [num for num in list if num % 2 == 0]","310":"def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))","311":"def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)","312":"def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a","313":"def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ","314":"import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]","315":"def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False","316":"import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))","317":"def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))","318":"import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))","319":"def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) \/ 2) ","320":"import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))","321":"def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) ","322":"def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ","323":"def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] \/ (2 * N - 1)","324":"def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ","325":"from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result","326":"def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])","327":"import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))","328":"def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ","329":"def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list","330":"from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] ","331":"import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA","332":"import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n","333":"def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result","334":"def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)","335":"def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ","336":"import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i","337":"import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)","338":"import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)","339":"def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ","340":"def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True","341":"import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area","342":"def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result","343":"def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res ","344":"def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]","345":"import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a\/360)","346":"import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)","347":"def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result","348":"def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list","349":"def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)","350":"def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]","351":"def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ","352":"def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result","353":"def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]","354":"def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res","355":"def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result","356":"def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)","357":"def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1","358":"def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11","359":"def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ","360":"def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr","361":"import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ","362":"def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp","363":"def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count","364":"def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n ","365":"def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ","366":"from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack","367":"def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ","368":"import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)","369":"def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))","370":"def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum","371":"from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]","372":"from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ","373":"import math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n \/\/ i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0","374":"def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) \/\/ 2) * arr[i])\n    return Sum","375":"def rgb_to_hsv(r, g, b):\n    r, g, b = r\/255.0, g\/255.0, b\/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)\/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)\/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)\/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df\/mx)*100\n    v = mx*100\n    return h, s, v","376":"def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)","377":"def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ","378":"import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)","379":"import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)","380":"def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])","381":"def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))","382":"def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ","383":"def count_list(input_list): \n    return len(input_list)","384":"def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) \/\/ 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res","385":"import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)","386":"def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum","387":"def sum_odd(n): \n    terms = (n + 1)\/\/2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)","388":"def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ","389":"def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  ","390":"import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))","391":"def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)","392":"def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n \/ i == i)):\n            return True     \n        i = i + 1\n    return False","393":"def is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False","394":"def max_sum_list(lists):\n return max(lists, key=sum)","395":"def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)","396":"def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd","397":"def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res ","398":"def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))"},"test_imports":{"0":[],"1":[],"2":[],"3":[],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[],"12":[],"13":[],"14":[],"15":[],"16":[],"17":[],"18":[],"19":[],"20":[],"21":[],"22":[],"23":[],"24":[],"25":[],"26":[],"27":[],"28":[],"29":[],"30":[],"31":[],"32":[],"33":[],"34":[],"35":[],"36":["import math"],"37":[],"38":[],"39":["import math"],"40":[],"41":[],"42":[],"43":[],"44":[],"45":[],"46":[],"47":[],"48":[],"49":[],"50":[],"51":[],"52":["import math"],"53":[],"54":[],"55":[],"56":[],"57":[],"58":[],"59":[],"60":[],"61":[],"62":[],"63":[],"64":[],"65":[],"66":[],"67":[],"68":[],"69":[],"70":[],"71":[],"72":["import math"],"73":[],"74":[],"75":[],"76":[],"77":[],"78":[],"79":[],"80":[],"81":[],"82":[],"83":["import math"],"84":[],"85":["import math"],"86":[],"87":[],"88":[],"89":[],"90":[],"91":[],"92":[],"93":[],"94":[],"95":[],"96":[],"97":[],"98":[],"99":[],"100":[],"101":[],"102":[],"103":[],"104":[],"105":[],"106":[],"107":[],"108":[],"109":[],"110":["import math"],"111":[],"112":[],"113":[],"114":[],"115":[],"116":[],"117":[],"118":[],"119":[],"120":[],"121":[],"122":[],"123":[],"124":[],"125":[],"126":[],"127":[],"128":[],"129":[],"130":[],"131":[],"132":[],"133":[],"134":[],"135":[],"136":[],"137":[],"138":[],"139":[],"140":[],"141":[],"142":[],"143":[],"144":["import math"],"145":[],"146":[],"147":[],"148":[],"149":[],"150":[],"151":[],"152":[],"153":[],"154":[],"155":[],"156":[],"157":[],"158":[],"159":[],"160":[],"161":[],"162":[],"163":[],"164":["import math"],"165":[],"166":[],"167":[],"168":[],"169":[],"170":[],"171":[],"172":["import math"],"173":[],"174":[],"175":[],"176":[],"177":[],"178":[],"179":[],"180":[],"181":[],"182":[],"183":[],"184":[],"185":[],"186":[],"187":[],"188":[],"189":[],"190":[],"191":[],"192":[],"193":[],"194":[],"195":[],"196":[],"197":[],"198":[],"199":[],"200":[],"201":[],"202":[],"203":[],"204":[],"205":[],"206":[],"207":[],"208":[],"209":[],"210":[],"211":[],"212":[],"213":[],"214":[],"215":[],"216":[],"217":[],"218":[],"219":[],"220":[],"221":[],"222":[],"223":[],"224":[],"225":[],"226":[],"227":[],"228":[],"229":[],"230":[],"231":[],"232":[],"233":[],"234":[],"235":[],"236":[],"237":[],"238":[],"239":[],"240":[],"241":[],"242":[],"243":[],"244":[],"245":[],"246":[],"247":[],"248":[],"249":[],"250":[],"251":[],"252":[],"253":[],"254":[],"255":[],"256":[],"257":[],"258":[],"259":[],"260":[],"261":[],"262":[],"263":[],"264":[],"265":[],"266":[],"267":[],"268":[],"269":[],"270":[],"271":[],"272":[],"273":[],"274":[],"275":[],"276":[],"277":[],"278":[],"279":[],"280":[],"281":[],"282":[],"283":[],"284":[],"285":[],"286":[],"287":[],"288":[],"289":[],"290":[],"291":[],"292":[],"293":[],"294":[],"295":[],"296":[],"297":[],"298":[],"299":[],"300":[],"301":[],"302":[],"303":[],"304":[],"305":[],"306":[],"307":[],"308":[],"309":[],"310":[],"311":[],"312":[],"313":[],"314":[],"315":[],"316":[],"317":[],"318":[],"319":[],"320":[],"321":[],"322":[],"323":[],"324":[],"325":[],"326":[],"327":[],"328":[],"329":[],"330":[],"331":[],"332":[],"333":[],"334":[],"335":[],"336":[],"337":[],"338":[],"339":[],"340":[],"341":[],"342":[],"343":[],"344":[],"345":[],"346":[],"347":[],"348":[],"349":[],"350":[],"351":[],"352":[],"353":[],"354":[],"355":[],"356":[],"357":[],"358":[],"359":[],"360":[],"361":[],"362":[],"363":[],"364":[],"365":[],"366":[],"367":[],"368":[],"369":[],"370":[],"371":[],"372":[],"373":[],"374":[],"375":[],"376":[],"377":[],"378":[],"379":[],"380":[],"381":[],"382":[],"383":[],"384":[],"385":[],"386":[],"387":[],"388":[],"389":[],"390":[],"391":[],"392":[],"393":[],"394":[],"395":[],"396":[],"397":[],"398":[]},"test_list":{"0":["assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))","assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))","assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"],"1":["assert is_not_prime(2) == False","assert is_not_prime(10) == True","assert is_not_prime(35) == True","assert is_not_prime(37) == False"],"2":["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]","assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]","assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"],"3":["assert differ_At_One_Bit_Pos(13,9) == True","assert differ_At_One_Bit_Pos(15,8) == False","assert differ_At_One_Bit_Pos(2,4) == False","assert differ_At_One_Bit_Pos(2, 3) == True","assert differ_At_One_Bit_Pos(5, 1) == True","assert differ_At_One_Bit_Pos(1, 5) == True"],"4":["assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])","assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])","assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"],"5":["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]","assert square_nums([10,20,30])==([100,400,900])","assert square_nums([12,15])==([144,225])"],"6":["assert find_Rotations(\"aaaa\") == 1","assert find_Rotations(\"ab\") == 2","assert find_Rotations(\"abc\") == 3"],"7":["assert remove_Occ(\"hello\",\"l\") == \"heo\"","assert remove_Occ(\"abcda\",\"a\") == \"bcd\"","assert remove_Occ(\"PHP\",\"P\") == \"H\""],"8":["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]","assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]","assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"],"9":["assert find_Volume(10,8,6) == 240","assert find_Volume(3,2,2) == 6","assert find_Volume(1,2,1) == 1"],"10":["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)","assert text_lowercase_underscore(\"aab_Abbbc\")==(False)","assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"],"11":["assert square_perimeter(10)==40","assert square_perimeter(5)==20","assert square_perimeter(4)==16"],"12":["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'","assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'","assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"],"13":["assert test_duplicate(([1,2,3,4,5]))==False","assert test_duplicate(([1,2,3,4, 4]))==True","assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"],"14":["assert is_woodall(383) == True","assert is_woodall(254) == False","assert is_woodall(200) == False"],"15":["assert check(70) == False","assert check(23) == False","assert check(73) == True"],"16":["assert find_Max_Num([1,2,3]) == 321","assert find_Max_Num([4,5,6,1]) == 6541","assert find_Max_Num([1,2,3,9]) == 9321"],"17":["assert opposite_Signs(1,-2) == True","assert opposite_Signs(3,2) == False","assert opposite_Signs(-10,-10) == False","assert opposite_Signs(-2,2) == True"],"18":["assert is_octagonal(5) == 65","assert is_octagonal(10) == 280","assert is_octagonal(15) == 645"],"19":["assert count_Substrings('112112') == 6","assert count_Substrings('111') == 6","assert count_Substrings('1101112') == 12"],"20":["assert smallest_num([10, 20, 1, 45, 99]) == 1","assert smallest_num([1, 2, 3]) == 1","assert smallest_num([45, 46, 50, 60]) == 45"],"21":["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7","assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15","assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"],"22":["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]","assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])","assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"],"23":["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21","assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106","assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"],"24":["assert pos_count([1,-2,3,-4]) == 2","assert pos_count([3,4,5,-1]) == 3","assert pos_count([1,2,3,4]) == 4"],"25":["assert bell_number(2)==2","assert bell_number(10)==115975","assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"],"26":["assert is_Monotonic([6, 5, 4, 4]) == True","assert is_Monotonic([1, 2, 2, 3]) == True","assert is_Monotonic([1, 3, 2]) == False"],"27":["assert is_sublist([2,4,3,5,7],[3,7])==False","assert is_sublist([2,4,3,5,7],[4,3])==True","assert is_sublist([2,4,3,5,7],[1,6])==False"],"28":["assert get_equal([(11, 22, 33), (44, 55, 66)]) == True","assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False","assert get_equal([(1, 2), (3, 4)]) == True"],"29":["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]","assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]","assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"],"30":["assert dif_Square(5) == True","assert dif_Square(10) == False","assert dif_Square(15) == True"],"31":["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True","assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False","assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"],"32":["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]","assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]","assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"],"33":["assert is_Diff (12345) == False","assert is_Diff(1212112) == True","assert is_Diff(1212) == False"],"34":["assert word_len(\"Hadoop\") == False","assert word_len(\"great\") == True","assert word_len(\"structure\") == True"],"35":["assert tetrahedral_number(5) == 35","assert tetrahedral_number(6) == 56","assert tetrahedral_number(7) == 84"],"36":["assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)","assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)","assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"],"37":["assert get_Char(\"abc\") == \"f\"","assert get_Char(\"gfg\") == \"t\"","assert get_Char(\"ab\") == \"c\""],"38":["assert sequence(10) == 6","assert sequence(2) == 1","assert sequence(3) == 2"],"39":["assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)","assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)","assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"],"40":["assert centered_hexagonal_number(10) == 271","assert centered_hexagonal_number(2) == 7","assert centered_hexagonal_number(9) == 217"],"41":["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}","assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}","assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"],"42":["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})","assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})","assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"],"43":["assert closest_num(11) == 10","assert closest_num(7) == 6","assert closest_num(12) == 11"],"44":["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7","assert len_log([\"a\",\"ab\",\"abc\"]) == 3","assert len_log([\"small\",\"big\",\"tall\"]) == 5"],"45":["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True","assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False","assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"],"46":["assert is_undulating(1212121) == True","assert is_undulating(1991) == False","assert is_undulating(121) == True"],"47":["assert power(3,4) == 81","assert power(2,3) == 8","assert power(5,5) == 3125"],"48":["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'","assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'","assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"],"49":["assert Find_Min_Length([[1],[1,2]]) == 1","assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2","assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"],"50":["assert divisor(15) == 4","assert divisor(12) == 6","assert divisor(9) == 3"],"51":["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}","assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}","assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"],"52":["assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)","assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)","assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"],"53":["assert decimal_to_binary(8) == '1000'","assert decimal_to_binary(18) == '10010'","assert decimal_to_binary(7) == '111'"],"54":["assert next_smallest_palindrome(99)==101","assert next_smallest_palindrome(1221)==1331","assert next_smallest_palindrome(120)==121"],"55":["assert kth_element([12,3,5,7,19], 2) == 3","assert kth_element([17,24,8,23], 3) == 8","assert kth_element([16,21,25,36,4], 4) == 36"],"56":["assert snake_to_camel('python_program')=='PythonProgram'","assert snake_to_camel('python_language')==('PythonLanguage')","assert snake_to_camel('programming_language')==('ProgrammingLanguage')"],"57":["assert eulerian_num(3, 1) == 4","assert eulerian_num(4, 1) == 11","assert eulerian_num(5, 3) == 26"],"58":["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]","assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]","assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"],"59":["assert count([True,False,True]) == 2","assert count([False,False]) == 0","assert count([True,True,True]) == 3"],"60":["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)","assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)","assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"],"61":["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]","assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]","assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"],"62":["assert odd_Equivalent(\"011001\",6) == 3","assert odd_Equivalent(\"11011\",5) == 4","assert odd_Equivalent(\"1010\",4) == 2"],"63":["assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])","assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])","assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"],"64":["assert check_integer(\"python\")==False","assert check_integer(\"1\")==True","assert check_integer(\"12345\")==True"],"65":["assert empty_dit([{},{},{}])==True","assert empty_dit([{1,2},{},{}])==False","assert empty_dit({})==True"],"66":["assert tuple_to_int((1,2,3))==123","assert tuple_to_int((4,5,6))==456","assert tuple_to_int((5,6,7))==567"],"67":["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]","assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]","assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"],"68":["assert string_to_list(\"python programming\")==['python','programming']","assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']","assert string_to_list(\"write a program\")==['write','a','program']"],"69":["assert search([1,1,2,2,3]) == 3","assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8","assert search([1,2,2,3,3,4,4]) == 1"],"70":["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36","assert max_product_tuple([(10,20), (15,2), (5,10)] )==200","assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"],"71":["assert amicable_numbers_sum(999)==504","assert amicable_numbers_sum(9999)==31626","assert amicable_numbers_sum(99)==0"],"72":["assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)","assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)","assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"],"73":["assert find_length(\"11000010001\") == 6","assert find_length(\"10111\") == 1","assert find_length(\"11011101100101\") == 2"],"74":["assert sum(10,15) == 6","assert sum(100,150) == 93","assert sum(4,6) == 3"],"75":["assert multiply_int(10,20)==200","assert multiply_int(5,10)==50","assert multiply_int(4,8)==32"],"76":["assert long_words(3,\"python is a programming language\")==['python','programming','language']","assert long_words(2,\"writing a program\")==['writing','program']","assert long_words(5,\"sorting list\")==['sorting']"],"77":["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True","assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True","assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"],"78":["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2","assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8","assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"],"79":["assert reverse_vowels(\"Python\") == \"Python\"","assert reverse_vowels(\"USA\") == \"ASU\"","assert reverse_vowels(\"ab\") == \"ab\""],"80":["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")","assert tup_string(('p','y','t','h','o','n'))==(\"python\")","assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"],"81":["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32","assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52","assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"],"82":["assert hexagonal_num(10) == 190","assert hexagonal_num(5) == 45","assert hexagonal_num(7) == 91"],"83":["assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)","assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)","assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"],"84":["assert is_Sum_Of_Powers_Of_Two(10) == True","assert is_Sum_Of_Powers_Of_Two(7) == False","assert is_Sum_Of_Powers_Of_Two(14) == True"],"85":["assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)","assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)","assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"],"86":["assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])","assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])","assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"],"87":["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]","assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]","assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"],"88":["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3","assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4","assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"],"89":["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2","assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3","assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"],"90":["assert max_Abs_Diff((2,1,5,3)) == 4","assert max_Abs_Diff((9,3,2,5,1)) == 8","assert max_Abs_Diff((3,2,1)) == 2"],"91":["assert find_solution(2, 3, 7) == (2, 1)","assert find_solution(4, 2, 7) == None","assert find_solution(1, 13, 17) == (4, 1)"],"92":["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]","assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]","assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"],"93":["assert sum_series(6) == 12","assert sum_series(10) == 30","assert sum_series(9) == 25"],"94":["assert are_equivalent(36, 57) == False","assert are_equivalent(2, 4) == False","assert are_equivalent(23, 47) == True"],"95":["assert count_char_position(\"xbcefg\") == 2","assert count_char_position(\"ABcED\") == 3","assert count_char_position(\"AbgdeF\") == 5"],"96":["assert find_even_pair([5, 4, 7, 2, 1]) == 4","assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9","assert find_even_pair([1, 2, 3]) == 1"],"97":["assert next_power_of_2(0) == 1","assert next_power_of_2(5) == 8","assert next_power_of_2(17) == 32"],"98":["assert frequency([1,2,3], 4) == 0","assert frequency([1,2,2,3,3,3,4], 3) == 3","assert frequency([0,1,2,3,1,2], 1) == 2"],"99":["assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29","assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16","assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"],"100":["assert perimeter_pentagon(5) == 25","assert perimeter_pentagon(10) == 50","assert perimeter_pentagon(15) == 75"],"101":["assert count_occurance(\"letstdlenstdporstd\") == 3","assert count_occurance(\"truststdsolensporsd\") == 1","assert count_occurance(\"makestdsostdworthit\") == 2","assert count_occurance(\"stds\") == 1","assert count_occurance(\"\") == 0"],"102":["assert check_type((5, 6, 7, 3, 5, 6) ) == True","assert check_type((1, 2, \"4\") ) == False","assert check_type((3, 2, 1, 4, 5) ) == True"],"103":["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True","assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False","assert is_majority([1, 1, 1, 2, 2], 5, 1) == True","assert is_majority([1, 1, 2, 2], 5, 1) == False"],"104":["assert count_Set_Bits(2) == 1","assert count_Set_Bits(4) == 1","assert count_Set_Bits(6) == 2"],"105":["assert odd_values_string('abcdef') == 'ace'","assert odd_values_string('python') == 'pto'","assert odd_values_string('data') == 'dt'","assert odd_values_string('lambs') == 'lms'"],"106":["assert min_of_three(10,20,0)==0","assert min_of_three(19,15,18)==15","assert min_of_three(-10,-20,-30)==-30"],"107":["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]","assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]","assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"],"108":["assert replace_blank(\"hello people\",'@')==(\"hello@people\")","assert replace_blank(\"python program language\",'$')==(\"python$program$language\")","assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"],"109":["assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])","assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])","assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"],"110":["assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)","assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)","assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"],"111":["assert volume_cube(3)==27","assert volume_cube(2)==8","assert volume_cube(5)==125"],"112":["assert even_bit_set_number(10) == 10","assert even_bit_set_number(20) == 30","assert even_bit_set_number(30) == 30"],"113":["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}","assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}","assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"],"114":["assert number_of_substrings(\"abc\") == 6","assert number_of_substrings(\"abcd\") == 10","assert number_of_substrings(\"abcde\") == 15"],"115":["assert get_total_number_of_sequences(10, 4) == 4","assert get_total_number_of_sequences(5, 2) == 6","assert get_total_number_of_sequences(16, 3) == 84"],"116":["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]","assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]","assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"],"117":["assert count_charac(\"python programming\")==18","assert count_charac(\"language\")==8","assert count_charac(\"words\")==5"],"118":["assert next_Perfect_Square(35) == 36","assert next_Perfect_Square(6) == 9","assert next_Perfect_Square(9) == 16"],"119":["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194","assert max_sum([80, 60, 30, 40, 20, 10]) == 210","assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"],"120":["assert lps(\"TENS FOR TENS\") == 5","assert lps(\"CARDIO FOR CARDS\") == 7","assert lps(\"PART OF THE JOURNEY IS PART\") == 9"],"121":["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]","assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]","assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"],"122":["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0","assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3","assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"],"123":["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']","assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']","assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"],"124":["assert convert(1) == (1.0, 0.0)","assert convert(4) == (4.0,0.0)","assert convert(5) == (5.0,0.0)"],"125":["assert count_integer([1,2,'abc',1.2]) == 2","assert count_integer([1,2,3]) == 3","assert count_integer([1,1.2,4,5.1]) == 2"],"126":["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]","assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]","assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"],"127":["assert count_Primes_nums(5) == 2","assert count_Primes_nums(10) == 4","assert count_Primes_nums(100) == 25"],"128":["assert swap_numbers(10,20)==(20,10)","assert swap_numbers(15,17)==(17,15)","assert swap_numbers(100,200)==(200,100)"],"129":["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))","assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))","assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"],"130":["assert newman_prime(3) == 7","assert newman_prime(4) == 17","assert newman_prime(5) == 41"],"131":["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)","assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)","assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"],"132":["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])","assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])","assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"],"133":["assert dog_age(12)==61","assert dog_age(15)==73","assert dog_age(24)==109"],"134":["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]","assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]","assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"],"135":["assert lateralsurface_cube(5)==100","assert lateralsurface_cube(9)==324","assert lateralsurface_cube(10)==400"],"136":["assert square_Sum(2) == 10","assert square_Sum(3) == 35","assert square_Sum(4) == 84"],"137":["assert find_star_num(3) == 37","assert find_star_num(4) == 73","assert find_star_num(5) == 121"],"138":["assert ascii_value('A')==65","assert ascii_value('R')==82","assert ascii_value('S')==83"],"139":["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30","assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26","assert sum_even_and_even_index([5, 6, 12, 1]) == 12"],"140":["assert even_Power_Sum(2) == 1056","assert even_Power_Sum(3) == 8832","assert even_Power_Sum(1) == 32"],"141":["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]","assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]","assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"],"142":["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)","assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)","assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"],"143":["assert even_binomial_Coeff_Sum(4) == 8","assert even_binomial_Coeff_Sum(6) == 32","assert even_binomial_Coeff_Sum(2) == 2"],"144":["assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)","assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)","assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"],"145":["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}","assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}","assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"],"146":["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3","assert count_first_elements((2, 9, (5, 7), 11) ) == 2","assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"],"147":["assert is_num_decagonal(3) == 27","assert is_num_decagonal(7) == 175","assert is_num_decagonal(10) == 370"],"148":["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)","assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)","assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"],"149":["assert all_unique([1,2,3]) == True","assert all_unique([1,2,1,2]) == False","assert all_unique([1,2,3,4,5]) == True"],"150":["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]","assert sub_list([1,2],[3,4])==[-2,-2]","assert sub_list([90,120],[50,70])==[40,50]"],"151":["assert validate(1234) == True","assert validate(51241) == False","assert validate(321) == True"],"152":["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False","assert check_element([1,2,3,4],7)==False","assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"],"153":["assert text_match_two_three(\"ac\")==(False)","assert text_match_two_three(\"dc\")==(False)","assert text_match_two_three(\"abbbba\")==(True)"],"154":["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30","assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59","assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"],"155":["assert square_Sum(2) == 20","assert square_Sum(3) == 56","assert square_Sum(4) == 120"],"156":["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])","assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])","assert max_length([[5], [15,20,25]])==(3, [15,20,25])"],"157":["assert find(10,3) == 3","assert find(4,2) == 2","assert find(20,5) == 4"],"158":["assert otherside_rightangle(7,8)==10.63014581273465","assert otherside_rightangle(3,4)==5","assert otherside_rightangle(7,15)==16.55294535724685"],"159":["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5","assert max_val(['Python', 15, 20, 25])==25","assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"],"160":["assert sum_div(8)==7","assert sum_div(12)==16","assert sum_div(7)==1"],"161":["assert get_Inv_Count([1,20,6,4,5]) == 5","assert get_Inv_Count([1,2,1]) == 1","assert get_Inv_Count([1,2,5,6,1]) == 3"],"162":["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]","assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]","assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"],"163":["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)","assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)","assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"],"164":["assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)","assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)","assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"],"165":["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4","assert dict_depth({'a':1, 'b': {'c':'python'}})==2","assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"],"166":["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')","assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')","assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"],"167":["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11","assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7","assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"],"168":["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]","assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]","assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"],"169":["assert maximum(5,10) == 10","assert maximum(-1,-2) == -1","assert maximum(9,7) == 9"],"170":["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')","assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')","assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"],"171":["assert set_left_most_unset_bit(10) == 14","assert set_left_most_unset_bit(12) == 14","assert set_left_most_unset_bit(15) == 15"],"172":["assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)","assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)","assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"],"173":["assert highest_Power_of_2(10) == 8","assert highest_Power_of_2(19) == 16","assert highest_Power_of_2(32) == 32"],"174":["assert find_lucas(9) == 76","assert find_lucas(4) == 7","assert find_lucas(3) == 4"],"175":["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']","assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']","assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"],"176":["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]","assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]","assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"],"177":["assert get_max_sum(60) == 106","assert get_max_sum(10) == 12","assert get_max_sum(2) == 2"],"178":["assert check_distinct((1, 4, 5, 6, 1, 4)) == False","assert check_distinct((1, 4, 5, 6)) == True","assert check_distinct((2, 3, 4, 5, 6)) == True"],"179":["assert first_non_repeating_character(\"abcabc\") == None","assert first_non_repeating_character(\"abc\") == \"a\"","assert first_non_repeating_character(\"ababc\") == \"c\""],"180":["assert check_char(\"abba\") == \"Valid\"","assert check_char(\"a\") == \"Valid\"","assert check_char(\"abcd\") == \"Invalid\""],"181":["assert median_numbers(25,55,65)==55.0","assert median_numbers(20,10,30)==20.0","assert median_numbers(15,45,75)==45.0"],"182":["assert sum_of_digits([10,2,56])==14","assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19","assert sum_of_digits([10,20,-4,5,-70])==19"],"183":["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3","assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4","assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"],"184":["assert minimum(1,2) == 1","assert minimum(-5,-4) == -5","assert minimum(0,0) == 0"],"185":["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True","assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False","assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"],"186":["assert find_Parity(12) == False","assert find_Parity(7) == True","assert find_Parity(10) == False"],"187":["assert rearrange_bigger(12)==21","assert rearrange_bigger(10)==False","assert rearrange_bigger(102)==120"],"188":["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8","assert min_product_tuple([(10,20), (15,2), (5,10)] )==30","assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"],"189":["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2","assert min_val(['Python', 15, 20, 25])==15","assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"],"190":["assert remove_odd([1,2,3]) == [2]","assert remove_odd([2,4,6]) == [2,4,6]","assert remove_odd([10,20,3]) == [10,20]"],"191":["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']","assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]","assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"],"192":["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False","assert overlapping([1,2,3],[4,5,6]) == False","assert overlapping([1,4,5],[1,4,5]) == True"],"193":["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)","assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)","assert max_Product([1,2,3]) == (2,3)"],"194":["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']","assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]","assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"],"195":["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243","assert round_and_sum([5,2,9,24.3,29])==345","assert round_and_sum([25.0,56.7,89.2])==513"],"196":["assert cube_Sum(2) == 72","assert cube_Sum(3) == 288","assert cube_Sum(4) == 800"],"197":["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'","assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'","assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"],"198":["assert find_Average_Of_Cube(2) == 4.5","assert find_Average_Of_Cube(3) == 12","assert find_Average_Of_Cube(1) == 1"],"199":["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']","assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']","assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"],"200":["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3","assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3","assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"],"201":["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]","assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]","assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"],"202":["assert change_date_format(\"2026-01-02\") == '02-01-2026'","assert change_date_format(\"2020-11-13\") == '13-11-2020'","assert change_date_format(\"2021-04-26\") == '26-04-2021'"],"203":["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]","assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]","assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"],"204":["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)","assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)","assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"],"205":["assert parabola_directrix(5,3,2)==-198","assert parabola_directrix(9,8,4)==-2336","assert parabola_directrix(2,4,6)==-130"],"206":["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True","assert common_element([1,2,3,4,5], [6,7,8,9])==None","assert common_element(['a','b','c'], ['d','b','e'])==True"],"207":["assert median_trapezium(15,25,35)==20","assert median_trapezium(10,20,30)==15","assert median_trapezium(6,9,4)==7.5"],"208":["assert check_greater([1, 2, 3, 4, 5], 4) == False","assert check_greater([2, 3, 4, 5, 6], 8) == True","assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"],"209":["assert last_Digit(123) == 3","assert last_Digit(25) == 5","assert last_Digit(30) == 0"],"210":["assert neg_nos([-1,4,5,-6]) == [-1,-6]","assert neg_nos([-1,-2,3,4]) == [-1,-2]","assert neg_nos([-7,-6,8,9]) == [-7,-6]"],"211":["assert remove_odd(\"python\")==(\"yhn\")","assert remove_odd(\"program\")==(\"rga\")","assert remove_odd(\"language\")==(\"agae\")"],"212":["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3","assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2","assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"],"213":["assert multiple_to_single([11, 33, 50])==113350","assert multiple_to_single([-1,2,3,4,5,6])==-123456","assert multiple_to_single([10,15,20,25])==10152025"],"214":["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')","assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')","assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"],"215":["assert surfacearea_cube(5)==150","assert surfacearea_cube(3)==54","assert surfacearea_cube(10)==600"],"216":["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54","assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69","assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"],"217":["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))","assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))","assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"],"218":["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3","assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6","assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"],"219":["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]","assert cube_nums([10,20,30])==([1000, 8000, 27000])","assert cube_nums([12,15])==([1728, 3375])"],"220":["assert cal_sum(9) == 49","assert cal_sum(10) == 66","assert cal_sum(11) == 88"],"221":["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']","assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']","assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"],"222":["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'","assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'","assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"],"223":["assert sumofFactors(18) == 26","assert sumofFactors(30) == 48","assert sumofFactors(6) == 8"],"224":["assert text_match_wordz(\"pythonz.\")==True","assert text_match_wordz(\"xyz.\")==True","assert text_match_wordz(\"  lang  .\")==False"],"225":["assert check_monthnumb_number(5)==True","assert check_monthnumb_number(2)==False","assert check_monthnumb_number(6)==False"],"226":["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']","assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']","assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"],"227":["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]","assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]","assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"],"228":["assert rectangle_area(10,20)==200","assert rectangle_area(10,5)==50","assert rectangle_area(4,2)==8"],"229":["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'","assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'","assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"],"230":["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]","assert Extract([[1,2,3],[4, 5]]) == [1,4]","assert Extract([[9,8,1],[1,2]]) == [9,1]"],"231":["assert upper_ctr('PYthon') == 1","assert upper_ctr('BigData') == 1","assert upper_ctr('program') == 0"],"232":["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]","assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]","assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"],"233":["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112","assert max_subarray_product([6, -3, -10, 0, 2]) == 180","assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"],"234":["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}","assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}","assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"],"235":["assert max_product([3, 100, 4, 5, 150, 6]) == 3000","assert max_product([4, 42, 55, 68, 80]) == 50265600","assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"],"236":["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)","assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)","assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"],"237":["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9","assert find_remainder([1,1,1],1) == 0","assert find_remainder([1,2,1],2) == 0"],"238":["assert check_Consecutive([1,2,3,4,5]) == True","assert check_Consecutive([1,2,3,5,6]) == False","assert check_Consecutive([1,2,1]) == False"],"239":["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}","assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}","assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"],"240":["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")","assert replace_char(\"character\",'c','a')==(\"aharaater\")","assert replace_char(\"python\",'l','a')==(\"python\")"],"241":["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]","assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]","assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"],"242":["assert big_sum([1,2,3]) == 4","assert big_sum([-1,2,3,4]) == 3","assert big_sum([2,3,6]) == 8"],"243":["assert is_lower(\"InValid\") == \"invalid\"","assert is_lower(\"TruE\") == \"true\"","assert is_lower(\"SenTenCE\") == \"sentence\""],"244":["assert remove_lowercase(\"PYTHon\")==('PYTH')","assert remove_lowercase(\"FInD\")==('FID')","assert remove_lowercase(\"STRinG\")==('STRG')"],"245":["assert first_Digit(123) == 1","assert first_Digit(456) == 4","assert first_Digit(12) == 1"],"246":["assert Split([1,2,3,4,5,6]) == [1,3,5]","assert Split([10,11,12,13]) == [11,13]","assert Split([7,8,9,1]) == [7,9,1]"],"247":["assert difference(3) == 30","assert difference(5) == 210","assert difference(2) == 6"],"248":["assert find_Odd_Pair([5,4,7,2,1],5) == 6","assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12","assert find_Odd_Pair([1,2,3],3) == 2"],"249":["assert toggle_string(\"Python\")==(\"pYTHON\")","assert toggle_string(\"Pangram\")==(\"pANGRAM\")","assert toggle_string(\"LIttLE\")==(\"liTTle\")"],"250":["assert digit_distance_nums(1,2) == 1","assert digit_distance_nums(23,56) == 6","assert digit_distance_nums(123,256) == 7"],"251":["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7","assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8","assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"],"252":["assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)","assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)","assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"],"253":["assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4","assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3","assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"],"254":["assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']","assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']","assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"],"255":["assert count_Pairs([1,2,1],3) == 2","assert count_Pairs([1,1,1,1],4) == 0","assert count_Pairs([1,2,3,4,5],5) == 10"],"256":["assert split('python') == ['p','y','t','h','o','n']","assert split('Name') == ['N','a','m','e']","assert split('program') == ['p','r','o','g','r','a','m']"],"257":["assert sum_digits(345)==12","assert sum_digits(12)==3","assert sum_digits(97)==16"],"258":["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True","assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False","assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"],"259":["assert empty_list(5)==[{},{},{},{},{}]","assert empty_list(6)==[{},{},{},{},{},{}]","assert empty_list(7)==[{},{},{},{},{},{},{}]"],"260":["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]","assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]","assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"],"261":["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]","assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]","assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"],"262":["assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000","assert unique_product([1, 2, 3, 1,]) == 6","assert unique_product([7, 8, 9, 0, 1, 1]) == 0"],"263":["assert surfacearea_cylinder(10,5)==942.45","assert surfacearea_cylinder(4,5)==226.18800000000002","assert surfacearea_cylinder(4,10)==351.848"],"264":["assert is_Sub_Array([1,4,3,5],[1,2]) == False","assert is_Sub_Array([1,2,1],[1,2,1]) == True","assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"],"265":["assert last_Digit_Factorial(4) == 4","assert last_Digit_Factorial(21) == 0","assert last_Digit_Factorial(30) == 0"],"266":["assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]","assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]","assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"],"267":["assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)","assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)","assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"],"268":["assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)","assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))","assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"],"269":["assert surface_Area(3,4) == 33","assert surface_Area(4,5) == 56","assert surface_Area(1,2) == 5"],"270":["assert my_dict({10})==False","assert my_dict({11})==False","assert my_dict({})==True"],"271":["assert catalan_number(10)==16796","assert catalan_number(9)==4862","assert catalan_number(7)==429"],"272":["assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]","assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]","assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"],"273":["assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]","assert split_Arr([1,2,3,4],1) == [2,3,4,1]","assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"],"274":["assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)","assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)","assert list_tuple([58,44,56])==(58,44,56)"],"275":["assert big_diff([1,2,3,4]) == 3","assert big_diff([4,5,12]) == 8","assert big_diff([9,2,3]) == 7"],"276":["assert perfect_squares(1,30)==[1, 4, 9, 16, 25]","assert perfect_squares(50,100)==[64, 81, 100]","assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"],"277":["assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))","assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))","assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"],"278":["assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]","assert swap_List([1, 2, 3]) == [3, 2, 1]","assert swap_List([4, 5, 6]) == [6, 5, 4]"],"279":["assert sum_Of_product(3) == 15","assert sum_Of_product(4) == 56","assert sum_Of_product(1) == 1"],"280":["assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')","assert removezero_ip(\"12.01.024\")==('12.1.24')","assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')"],"281":["assert diff_even_odd([1,3,5,7,4,1,6,8])==3","assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1","assert diff_even_odd([1,5,7,9,10])==9"],"282":["assert min_Swaps(\"1101\",\"1110\") == 1","assert min_Swaps(\"111\",\"000\") == \"Not Possible\"","assert min_Swaps(\"111\",\"110\") == \"Not Possible\""],"283":["assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))","assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))","assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"],"284":["assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6","assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256","assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8"],"285":["assert armstrong_number(153)==True","assert armstrong_number(259)==False","assert armstrong_number(4458)==False"],"286":["assert sum_average(10)==(55, 5.5)","assert sum_average(15)==(120, 8.0)","assert sum_average(20)==(210, 10.5)"],"287":["assert is_Even(1) == False","assert is_Even(2) == True","assert is_Even(3) == False"],"288":["assert first_repeated_char(\"abcabc\") == \"a\"","assert first_repeated_char(\"abc\") == None","assert first_repeated_char(\"123123\") == \"1\""],"289":["assert get_ludic(10) == [1, 2, 3, 5, 7]","assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]","assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"],"290":["assert reverse_words(\"python program\")==(\"program python\")","assert reverse_words(\"java language\")==(\"language java\")","assert reverse_words(\"indian man\")==(\"man indian\")"],"291":["assert prime_num(13)==True","assert prime_num(7)==True","assert prime_num(-1010)==False"],"292":["assert radian_degree(90)==1.5707963267948966","assert radian_degree(60)==1.0471975511965976","assert radian_degree(120)==2.0943951023931953"],"293":["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)","assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)","assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"],"294":["assert bell_Number(2) == 2","assert bell_Number(3) == 5","assert bell_Number(4) == 15"],"295":["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]","assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]","assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"],"296":["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19","assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10","assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"],"297":["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]","assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]","assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"],"298":["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30","assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37","assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"],"299":["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]","assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]","assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"],"300":["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)","assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)","assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"],"301":["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]","assert div_list([3,2],[1,4])==[3.0, 0.5]","assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"],"302":["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'","assert move_num('Avengers124Assemble') == 'AvengersAssemble124'","assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"],"303":["assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4","assert largest_subset([10, 5, 3, 15, 20]) == 3","assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"],"304":["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0","assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5","assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"],"305":["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]","assert nth_nums([10,20,30],3)==([1000, 8000, 27000])","assert nth_nums([12,15],5)==([248832, 759375])"],"306":["assert is_upper(\"person\") ==\"PERSON\"","assert is_upper(\"final\") == \"FINAL\"","assert is_upper(\"Valid\") == \"VALID\""],"307":["assert triangle_area(-1) == None","assert triangle_area(0) == 0","assert triangle_area(2) == 4"],"308":["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'","assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'","assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"],"309":["assert Split([1,2,3,4,5]) == [2,4]","assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]","assert Split ([8,12,15,19]) == [8,12]"],"310":["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]","assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]","assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"],"311":["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'","assert replace_spaces('The_Avengers') == 'The Avengers'","assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"],"312":["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]","assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]","assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"],"313":["assert pair_xor_Sum([5,9,7,6],4) == 47","assert pair_xor_Sum([7,3,5],3) == 12","assert pair_xor_Sum([7,3],2) == 4"],"314":["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]","assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"],"315":["assert noprofit_noloss(1500,1200)==False","assert noprofit_noloss(100,100)==True","assert noprofit_noloss(2000,5000)==False"],"316":["assert wind_chill(120,35)==40","assert wind_chill(40,20)==19","assert wind_chill(10,8)==6"],"317":["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16","assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10","assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"],"318":["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")","assert remove_parenthesis([\"string(.abc)\"])==(\"string\")","assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"],"319":["assert is_nonagonal(10) == 325","assert is_nonagonal(15) == 750","assert is_nonagonal(18) == 1089"],"320":["assert text_match_wordz_middle(\"pythonzabc.\")==True","assert text_match_wordz_middle(\"zxyabc.\")==False","assert text_match_wordz_middle(\"  lang  .\")==False"],"321":["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]","assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]","assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"],"322":["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})","assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})","assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"],"323":["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2","assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2","assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2","assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"],"324":["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}","assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}","assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"],"325":["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4","assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11","assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1","assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"],"326":["assert power_base_sum(2,100)==115","assert power_base_sum(8,10)==37","assert power_base_sum(8,15)==62","assert power_base_sum(3,3)==9"],"327":["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']","assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']","assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']","assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"],"328":["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)","assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)","assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)","assert multiply_elements((12,)) == ()"],"329":["assert sum_list([10,20,30],[15,25,35])==[25,45,65]","assert sum_list([1,2,3],[5,6,7])==[6,8,10]","assert sum_list([15,20,30],[15,45,75])==[30,65,105]"],"330":["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]","assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]","assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']","assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"],"331":["assert lateralsurface_cone(5,12)==204.20352248333654","assert lateralsurface_cone(10,15)==566.3586699569488","assert lateralsurface_cone(19,17)==1521.8090132193388"],"332":["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')","assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')","assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"],"333":["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1","assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2","assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"],"334":["assert sum_Of_Subarray_Prod([1,2,3]) == 20","assert sum_Of_Subarray_Prod([1,2]) == 5","assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"],"335":["assert toggle_middle_bits(9) == 15","assert toggle_middle_bits(10) == 12","assert toggle_middle_bits(11) == 13","assert toggle_middle_bits(0b1000001) == 0b1111111","assert toggle_middle_bits(0b1001101) == 0b1110011"],"336":["assert left_insertion([1,2,4,5],6)==4","assert left_insertion([1,2,4,5],3)==2","assert left_insertion([1,2,4,5],7)==4"],"337":["assert check_str(\"annie\")","assert not check_str(\"dawood\")","assert check_str(\"Else\")"],"338":["assert find_Index(2) == 4","assert find_Index(3) == 14","assert find_Index(4) == 45"],"339":["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}","assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}","assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"],"340":["assert all_Characters_Same(\"python\") == False","assert all_Characters_Same(\"aaa\") == True","assert all_Characters_Same(\"data\") == False"],"341":["assert area_tetrahedron(3)==15.588457268119894","assert area_tetrahedron(20)==692.8203230275509","assert area_tetrahedron(10)==173.20508075688772"],"342":["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]","assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]","assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"],"343":["assert check_none((10, 4, 5, 6, None)) == True","assert check_none((7, 8, 9, 11, 14)) == False","assert check_none((1, 2, 3, 4, None)) == True"],"344":["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]","assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]","assert divisible_by_digits(20,25)==[22, 24]"],"345":["assert sector_area(4,45)==6.283185307179586","assert sector_area(9,45)==31.808625617596654","assert sector_area(9,361)==None"],"346":["assert capital_words_spaces(\"Python\") == 'Python'","assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'","assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"],"347":["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]","assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]","assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"],"348":["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]","assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]","assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"],"349":["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True","assert check_min_heap([2, 3, 4, 5, 10, 15]) == True","assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"],"350":["assert jacobsthal_num(5) == 11","assert jacobsthal_num(2) == 1","assert jacobsthal_num(4) == 5","assert jacobsthal_num(13) == 2731"],"351":["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]","assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]","assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"],"352":["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]","assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]","assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]","assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"],"353":["assert second_smallest([1, 2, -8, -2, 0, -2])==-2","assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5","assert second_smallest([2,2])==None","assert second_smallest([2,2,2])==None"],"354":["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2","assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1","assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"],"355":["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}","assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}","assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}","assert unique_sublists([['john']])=={('john',): 1}"],"356":["assert is_decimal('123.11')==True","assert is_decimal('e666.86')==False","assert is_decimal('3.124587')==False","assert is_decimal('1.11')==True","assert is_decimal('1.1.11')==False"],"357":["assert unique_Element([1,1,1]) == True","assert unique_Element([1,2,1,2]) == False","assert unique_Element([1,2,3,4,5]) == False"],"358":["assert check_monthnumber_number(6)==True","assert check_monthnumber_number(2)==False","assert check_monthnumber_number(12)==False"],"359":["assert find_min_diff((1,5,3,19,18,25),6) == 1","assert find_min_diff((4,3,2,6),4) == 1","assert find_min_diff((30,5,20,9),4) == 4"],"360":["assert number_ctr('program2bedone') == 1","assert number_ctr('3wonders') == 1","assert number_ctr('123') == 3","assert number_ctr('3wond-1ers2') == 3"],"361":["assert is_polite(7) == 11","assert is_polite(4) == 7","assert is_polite(9) == 13"],"362":["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]","assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]","assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]","assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"],"363":["assert get_pairs_count([1,1,1,1],2) == 6","assert get_pairs_count([1,5,7,-1,5],6) == 3","assert get_pairs_count([1,-2,3],1) == 1","assert get_pairs_count([-1,-2,3],-3) == 1"],"364":["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]","assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]","assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"],"365":["assert odd_num_sum(2) == 82","assert odd_num_sum(3) == 707","assert odd_num_sum(4) == 3108"],"366":["assert check_expression(\"{()}[{}]\") == True","assert check_expression(\"{()}[{]\") == False","assert check_expression(\"{()}[{}][]({})\") == True"],"367":["assert remove_length('The person is most value tet', 3) == 'person is most value'","assert remove_length('If you told me about this ok', 4) == 'If you me about ok'","assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"],"368":["assert occurance_substring('python programming, python language','python')==('python', 0, 6)","assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)","assert occurance_substring('python programming,programming language','language')==('language', 31, 39)","assert occurance_substring('c++ programming, c++ language','python')==None"],"369":["assert odd_position([2,1,4,3,6,7,6,3]) == True","assert odd_position([4,1,2]) == True","assert odd_position([1,2,3]) == False"],"370":["assert find_sum([1,2,3,1,1,4,5,6]) == 21","assert find_sum([1,10,9,4,2,10,10,45,4]) == 71","assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"],"371":["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]","assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]","assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"],"372":["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]","assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]","assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"],"373":["assert count_divisors(10)","assert not count_divisors(100)","assert count_divisors(125)"],"374":["assert odd_length_sum([1,2,4]) == 14","assert odd_length_sum([1,2,1,2]) == 15","assert odd_length_sum([1,7]) == 8"],"375":["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)","assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)","assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"],"376":["assert mul_even_odd([1,3,5,7,4,1,6,8])==4","assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2","assert mul_even_odd([1,5,7,9,10])==10"],"377":["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)","assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)","assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)","assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"],"378":["assert right_insertion([1,2,4,5],6)==4","assert right_insertion([1,2,4,5],3)==2","assert right_insertion([1,2,4,5],7)==4"],"379":["assert not text_match_three(\"ac\")","assert not text_match_three(\"dc\")","assert text_match_three(\"abbbba\")","assert text_match_three(\"caacabbbba\")"],"380":["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')","assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')","assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"],"381":["assert even_position([3,2,1]) == False","assert even_position([1,2,3]) == False","assert even_position([2,1,4]) == True"],"382":["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)","assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)","assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)","assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"],"383":["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4","assert count_list([[1,2],[2,3],[4,5]]) == 3","assert count_list([[1,0],[2,0]]) == 2"],"384":["assert last([1,2,3],1) == 0","assert last([1,1,1,2,3,4],1) == 2","assert last([2,3,2,3,6,8,9],3) == 3"],"385":["assert text_starta_endb(\"aabbbb\")","assert not text_starta_endb(\"aabAbbbc\")","assert not text_starta_endb(\"accddbbjjj\")"],"386":["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600","assert return_sum({'a': 25, 'b':18, 'c':45}) == 88","assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"],"387":["assert sum_in_range(2,5) == 8","assert sum_in_range(5,7) == 12","assert sum_in_range(7,13) == 40"],"388":["assert _sum([1, 2, 3]) == 6","assert _sum([15, 12, 13, 10]) == 50","assert _sum([0, 1, 2]) == 3"],"389":["assert left_rotate(16,2) == 64","assert left_rotate(10,2) == 40","assert left_rotate(99,3) == 792","assert left_rotate(99,3) == 792","assert left_rotate(0b0001,3) == 0b1000","assert left_rotate(0b0101,3) == 0b101000","assert left_rotate(0b11101,3) == 0b11101000"],"390":["assert remove_all_spaces('python  program')==('pythonprogram')","assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')","assert remove_all_spaces('python                     program')==('pythonprogram')","assert remove_all_spaces('   python                     program')=='pythonprogram'"],"391":["assert test_three_equal(1,1,1) == 3","assert test_three_equal(-1,-2,-3) == 0","assert test_three_equal(1,2,2) == 2"],"392":["assert not is_perfect_square(10)","assert is_perfect_square(36)","assert not is_perfect_square(14)","assert is_perfect_square(14*14)","assert not is_perfect_square(125)","assert is_perfect_square(125*125)"],"393":["assert is_product_even([1,2,3])","assert is_product_even([1,2,1,4])","assert not is_product_even([1,1])"],"394":["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]","assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]","assert max_sum_list([[2,3,1]])==[2,3,1]"],"395":["assert max_run_uppercase('GeMKSForGERksISBESt') == 5","assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6","assert max_run_uppercase('GooGLEFluTTER') == 4"],"396":["assert first_odd([1,3,5]) == 1","assert first_odd([2,4,1,3]) == 1","assert first_odd ([8,9,1]) == 9"],"397":["assert check_K((10, 4, 5, 6, 8), 6) == True","assert check_K((1, 2, 3, 4, 5, 6), 7) == False","assert check_K((7, 8, 9, 44, 11, 12), 11) == True"],"398":["assert check_smaller((1, 2, 3), (2, 3, 4)) == False","assert check_smaller((4, 5, 6), (3, 4, 5)) == True","assert check_smaller((11, 12, 13), (10, 11, 12)) == True"]},"instruction":{"0":"Write a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))","1":"Write a python function to identify non-prime numbers.\nassert is_not_prime(2) == False","2":"Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]","3":"Write a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True","4":"Write a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])","5":"Write a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]","6":"Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1","7":"Write a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"","8":"Write a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]","9":"Write a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240","10":"Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)","11":"Write a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40","12":"Write a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'","13":"Write a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False","14":"Write a function to check if the given number is woodball or not.\nassert is_woodall(383) == True","15":"Write a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False","16":"Write a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321","17":"Write a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True","18":"Write a function to find the nth octagonal number.\nassert is_octagonal(5) == 65","19":"Write a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6","20":"Write a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1","21":"Write a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7","22":"Write a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]","23":"Write a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21","24":"Write a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2","25":"Write a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2","26":"Write a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True","27":"Write a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False","28":"Write a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True","29":"Write a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]","30":"Write a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True","31":"Write a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True","32":"Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]","33":"Write a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False","34":"Write a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False","35":"Write a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35","36":"Write a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)","37":"Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"","38":"Write a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6","39":"Write a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)","40":"Write a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271","41":"Write a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}","42":"Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})","43":"Write a function to find the closest smaller number than n.\nassert closest_num(11) == 10","44":"Write a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7","45":"Write a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True","46":"Write a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True","47":"Write a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81","48":"Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'","49":"Write a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1","50":"Write a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4","51":"Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}","52":"Write a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)","53":"Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'","54":"Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101","55":"Write a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3","56":"Write a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'","57":"Write a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4","58":"Write a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]","59":"Write a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2","60":"Write a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)","61":"Write a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]","62":"Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3","63":"Write a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])","64":"Write a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False","65":"Write a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True","66":"Write a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123","67":"Write a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]","68":"Write a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']","69":"Write a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3","70":"Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36","71":"Write a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504","72":"Write a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)","73":"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6","74":"Write a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6","75":"Write a function to multiply two integers.\nassert multiply_int(10,20)==200","76":"Write a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']","77":"Write a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True","78":"Write a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2","79":"Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"","80":"Write a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")","81":"Write a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32","82":"Write a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190","83":"Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)","84":"Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True","85":"Write a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)","86":"Write a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])","87":"Write a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]","88":"Write a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3","89":"Write a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2","90":"Write a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4","91":"Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)","92":"Write a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]","93":"Write a function to calculate the sum (n - 2*i) from i=0 to n \/\/ 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12","94":"Write a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False","95":"Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2","96":"Write a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4","97":"Write a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1","98":"Write a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0","99":"Write a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29","100":"Write a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25","101":"Write a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3","102":"Write a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True","103":"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n\/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True","104":"Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1","105":"Write a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'","106":"Write a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0","107":"Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]","108":"Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")","109":"Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])","110":"Write a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)","111":"Write a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27","112":"Write a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10","113":"Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}","114":"Write a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6","115":"Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4","116":"Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]","117":"Write a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18","118":"Write a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36","119":"Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194","120":"Write a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5","121":"Write a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]","122":"Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0","123":"Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']","124":"Write a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)","125":"Write a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2","126":"Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]","127":"Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2","128":"Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)","129":"Write a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))","130":"Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7","131":"Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)","132":"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])","133":"Write a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61","134":"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]","135":"Write a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100","136":"Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10","137":"Write a function to find the n'th star number.\nassert find_star_num(3) == 37","138":"Write a function to find the ascii value of a character.\nassert ascii_value('A')==65","139":"Write a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30","140":"Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056","141":"Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]","142":"Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)","143":"Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8","144":"Write a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)","145":"Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}","146":"Write a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3","147":"Write a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27","148":"Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)","149":"Write a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True","150":"Write a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]","151":"Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True","152":"Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False","153":"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)","154":"Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30","155":"Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20","156":"Write a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])","157":"Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3","158":"Write a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465","159":"Write a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5","160":"Write a function to return the sum of all divisors of a number.\nassert sum_div(8)==7","161":"Write a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5","162":"Write a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]","163":"Write a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)","164":"Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)","165":"Write a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4","166":"Write a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')","167":"Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11","168":"Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]","169":"Write a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10","170":"Write a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')","171":"Write a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14","172":"Write a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)","173":"Write a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8","174":"Write a function to find the n'th lucas number.\nassert find_lucas(9) == 76","175":"Write a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']","176":"Write a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]","177":"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5)), n).\nassert get_max_sum(60) == 106","178":"Write a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False","179":"Write a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None","180":"Write a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"","181":"Write a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0","182":"Write a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14","183":"Write a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3","184":"Write a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1","185":"Write a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True","186":"Write a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False","187":"Write a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21","188":"Write a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8","189":"Write a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2","190":"Write a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]","191":"Write a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']","192":"Write a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False","193":"Write a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)","194":"Write a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']","195":"Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243","196":"Write a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72","197":"Write a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'","198":"Write a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5","199":"Write a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']","200":"Write a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3","201":"Write a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]","202":"Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'","203":"Write a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]","204":"Write a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)","205":"Write a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198","206":"Write a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True","207":"Write a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20","208":"Write a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False","209":"Write a python function to find the last digit of a given number.\nassert last_Digit(123) == 3","210":"Write a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]","211":"Write a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")","212":"Write a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3","213":"Write a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350","214":"Write a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')","215":"Write a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150","216":"Write a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54","217":"Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))","218":"Write a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3","219":"Write a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]","220":"Write a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49","221":"Write a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']","222":"Write a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'","223":"Write a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26","224":"Write a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True","225":"Write a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True","226":"Write a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']","227":"Write a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]","228":"Write a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200","229":"Write a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'","230":"Write a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]","231":"Write a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1","232":"Write a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]","233":"Write a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112","234":"Write a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}","235":"Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000","236":"Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)","237":"Write a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9","238":"Write a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True","239":"Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}","240":"Write a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")","241":"Write a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]","242":"Write a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4","243":"Write a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"","244":"Write a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')","245":"Write a python function to find the first digit of a given number.\nassert first_Digit(123) == 1","246":"Write a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]","247":"Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30","248":"Write a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6","249":"Write a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")","250":"Write a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1","251":"Write a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7","252":"Write a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)","253":"Write a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4","254":"Write a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']","255":"Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2","256":"Write a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']","257":"Write a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12","258":"Write a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True","259":"Write a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]","260":"Write a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]","261":"Write a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]","262":"Write a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000","263":"Write a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45","264":"Write a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False","265":"Write a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4","266":"Write a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]","267":"Write a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)","268":"Write a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)","269":"Write a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33","270":"Write a function to check if a dictionary is empty\nassert my_dict({10})==False","271":"Write a function which returns nth catalan number.\nassert catalan_number(10)==16796","272":"Write a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]","273":"Write a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]","274":"Write a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)","275":"Write a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3","276":"Write a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]","277":"Write a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))","278":"Write a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]","279":"Write a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15","280":"Write a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')","281":"Write a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3","282":"Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1","283":"Write a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))","284":"Write a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6","285":"Write a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True","286":"Write a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)","287":"Write a python function to check whether the given number is even or not.\nassert is_Even(1) == False","288":"Write a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"","289":"Write a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]","290":"Write a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")","291":"Write a function to check if the given integer is a prime number.\nassert prime_num(13)==True","292":"Write a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966","293":"Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)","294":"Write a python function to find nth bell number.\nassert bell_Number(2) == 2","295":"Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]","296":"Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19","297":"Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]","298":"Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30","299":"Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]","300":"Write a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)","301":"Write a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]","302":"Write a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'","303":"Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4","304":"Write a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0","305":"Write a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]","306":"Write a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"","307":"Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None","308":"Write a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'","309":"Write a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]","310":"Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]","311":"Write a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'","312":"Write a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]","313":"Write a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47","314":"Write a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","315":"Write a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False","316":"Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\nassert wind_chill(120,35)==40","317":"Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16","318":"Write a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")","319":"Write a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325","320":"Write a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True","321":"Write a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]","322":"Write a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})","323":"Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2","324":"The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}","325":"The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4","326":"Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115","327":"Write a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']","328":"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)","329":"Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]","330":"Write a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]","331":"Write a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654","332":"Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')","333":"Write a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1","334":"Write a python function to find sum of products of all possible sublists of a given list. https:\/\/www.geeksforgeeks.org\/sum-of-products-of-all-possible-subarrays\/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20","335":"Write a python function to toggle bits of the number except the first and the last bit. https:\/\/www.geeksforgeeks.org\/toggle-bits-number-expect-first-last-bits\/\nassert toggle_middle_bits(9) == 15","336":"Write a function to locate the left insertion point for a specified value in sorted order. https:\/\/www.w3resource.com\/python-exercises\/data-structures-and-algorithms\/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4","337":"Write a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")","338":"Write a python function to find the index of smallest triangular number with n digits. https:\/\/www.geeksforgeeks.org\/index-of-smallest-triangular-number-with-n-digits\/\nassert find_Index(2) == 4","339":"Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https:\/\/www.geeksforgeeks.org\/python-convert-tuple-to-adjacent-pair-dictionary\/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}","340":"Write a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False","341":"Write a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894","342":"Write a function to rotate a given list by specified number of items to the right direction. https:\/\/www.geeksforgeeks.org\/python-program-right-rotate-list-n\/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]","343":"Write a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True","344":"Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https:\/\/www.w3resource.com\/python-exercises\/lambda\/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]","345":"Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586","346":"Write a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'","347":"Write a function to sort a given list of strings of numbers numerically. https:\/\/www.geeksforgeeks.org\/python-sort-numeric-strings-in-a-list\/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]","348":"Write a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]","349":"Write a function to check if the given array represents min heap or not. https:\/\/www.geeksforgeeks.org\/how-to-check-if-a-given-array-represents-a-binary-heap\/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True","350":"Write a function to find the nth jacobsthal number. https:\/\/www.geeksforgeeks.org\/jacobsthal-and-jacobsthal-lucas-numbers\/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11","351":"Write a function to find minimum k records from tuple list. https:\/\/www.geeksforgeeks.org\/python-find-minimum-k-records-from-tuple-list\/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]","352":"We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]","353":"Write a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2","354":"Write a function to count the pairs of reverse strings in the given string list. https:\/\/www.geeksforgeeks.org\/python-program-to-count-the-pairs-of-reverse-strings\/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2","355":"Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}","356":"Write a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True","357":"Write a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True","358":"Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True","359":"Write a python function to find the minimum difference between any two elements in a given array. https:\/\/www.geeksforgeeks.org\/find-minimum-difference-pair\/\nassert find_min_diff((1,5,3,19,18,25),6) == 1","360":"Write a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1","361":"Write a function to find nth polite number. geeksforgeeks.org\/n-th-polite-number\/\nassert is_polite(7) == 11","362":"Write a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]","363":"Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6","364":"Write a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]","365":"Write a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82","366":"Write a function to check if the given expression is balanced or not. https:\/\/www.geeksforgeeks.org\/check-for-balanced-parentheses-in-an-expression\/\nassert check_expression(\"{()}[{}]\") == True","367":"Write a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'","368":"Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)","369":"Write a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True","370":"Write a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21","371":"Write a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]","372":"Write a function to find the combinations of sums with tuples in the given tuple list. https:\/\/www.geeksforgeeks.org\/python-combinations-of-sum-with-tuples-in-tuple-list\/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]","373":"Write a python function to check whether the count of divisors is even. https:\/\/www.w3resource.com\/python-exercises\/basic\/python-basic-1-exercise-24.php\nassert count_divisors(10)","374":"Write a python function to find the sum of all odd length subarrays. https:\/\/www.geeksforgeeks.org\/sum-of-all-odd-length-subarrays\/\nassert odd_length_sum([1,2,4]) == 14","375":"Write a function to convert rgb color to hsv color. https:\/\/www.geeksforgeeks.org\/program-change-rgb-color-model-hsv-color-model\/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)","376":"Write a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4","377":"Write a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)","378":"Write a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4","379":"Write a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")","380":"Write a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')","381":"Write a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False","382":"Write a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)","383":"Write a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4","384":"Write a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0","385":"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")","386":"Write function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600","387":"Write a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8","388":"Write a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6","389":"Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64","390":"Write a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')","391":"Write a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3","392":"Write a function to check whether the given number is a perfect square or not. https:\/\/www.geeksforgeeks.org\/check-if-given-number-is-perfect-square-in-cpp\/\nassert not is_perfect_square(10)","393":"Write a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])","394":"Write a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]","395":"Write a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5","396":"Write a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1","397":"Write a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True","398":"Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"},"signature":{"0":"similar_elements(test_tup1, test_tup2)","1":"is_not_prime(n)","2":"heap_queue_largest(nums, n)","3":"is_Power_Of_Two(x)","4":"ind_char_long(text)","5":"square_nums(nums)","6":"ind_Rotations(str)","7":"remove_Occ(s, ch)","8":"sort_matrix(M)","9":"ind_Volume(l, b, h)","10":"text_lowercase_underscore(text)","11":"square_perimeter(a)","12":"str_to_list(string)","13":"test_duplicate(arraynums)","14":"is_woodall(x)","15":"rev(num)","16":"ind_Max_Num(arr)","17":"opposite_Signs(x, y)","18":"is_octagonal(n)","19":"count_Substrings(s)","20":"smallest_num(xs)","21":"max_difference(test_list)","22":"subject_marks(subjectmarks)","23":"recursive_list_sum(data_list)","24":"pos_count(list)","25":"bell_number(n)","26":"is_Monotonic(A)","27":"is_sublist(l, s)","28":"ind_equal_tuple(Input)","29":"comb_sort(nums)","30":"if_Square(n)","31":"is_samepatterns(colors, patterns)","32":"ind_tuples(test_list, K)","33":"is_Diff(n)","34":"word_len(s)","35":"tetrahedral_number(n)","36":"volume_sphere(r)","37":"get_Char(strr)","38":"sequence(n)","39":"surfacearea_sphere(r)","40":"centered_hexagonal_number(n)","41":"merge_dictionaries_three(dict1, dict2, dict3)","42":"req_count(list1)","43":"closest_num(N)","44":"len_log(list1)","45":"ind_substring(str1, sub_str)","46":"is_undulating(n)","47":"power(a, b)","48":"index_minimum(test_list)","49":"Find_Min_Length(lst)","50":"ivisor(n)","51":"requency_lists(list1)","52":"multiply_num(numbers)","53":"cimal_to_binary(n)","54":"next_smallest_palindrome(num)","55":"kth_element(arr, k)","56":"snake_to_camel(word)","57":"ulerian_num(n, m)","58":"sort_sublists(input_list)","59":"count(lst)","60":"add_lists(test_list, test_tup)","61":"merge_sorted_list(num1, num2, num3)","62":"odd_Equivalent(s, n)","63":"common_in_nested_lists(nestedlist)","64":"check_integer(text)","65":"mpty_dit(list1)","66":"tuple_to_int(nums)","67":"list_to_float(test_list)","68":"string_to_list(string)","69":"search(arr)","70":"max_product_tuple(list1)","71":"amicable_numbers_sum(limit)","72":"angle_complex(a, b)","73":"ind_length(string)","74":"sum(a, b)","75":"multiply_int(x, y)","76":"long_words(n, str)","77":"magic_square_test(my_matrix)","78":"max_occurrences(nums)","79":"reverse_vowels(str1)","80":"tup_string(tup1)","81":"sum_negativenum(nums)","82":"hexagonal_num(n)","83":"zero_count(nums)","84":"is_Sum_Of_Powers_Of_Two(n)","85":"circle_circumference(r)","86":"xtract_singly(test_list)","87":"pancake_sort(nums)","88":"count_samepair(list1, list2, list3)","89":"ind_lists(Input)","90":"max_Abs_Diff(arr)","91":"ind_solution(a, b, n)","92":"remove_elements(list1, list2)","93":"sum_series(n)","94":"iv_sum(n)","95":"count_char_position(str1)","96":"ind_even_pair(A)","97":"next_power_of_2(n)","98":"requency(a, x)","99":"sum_range_list(list1, m, n)","100":"perimeter_pentagon(a)","101":"count_occurance(s)","102":"check_type(test_tuple)","103":"is_majority(arr, n, x)","104":"count_Set_Bits(n)","105":"odd_values_string(str)","106":"min_of_three(a, b, c)","107":"re_arrange_array(arr, n)","108":"replace_blank(str1, char)","109":"larg_nnum(list1, n)","110":"lateralsuface_cylinder(r, h)","111":"volume_cube(l)","112":"ven_bit_set_number(n)","113":"check_occurences(test_list)","114":"number_of_substrings(str)","115":"get_total_number_of_sequences(m, n)","116":"replace_list(list1, list2)","117":"count_charac(str1)","118":"next_Perfect_Square(N)","119":"max_sum(arr)","120":"lps(str)","121":"intersection_array(array_nums1, array_nums2)","122":"count_X(tup, x)","123":"insert_element(list, element)","124":"convert(numbers)","125":"count_integer(list1)","126":"combinations_colors(l, n)","127":"count_Primes_nums(n)","128":"swap_numbers(a, b)","129":"maximize_elements(test_tup1, test_tup2)","130":"newman_prime(n)","131":"ivision_elements(test_tup1, test_tup2)","132":"split_two_parts(list1, L)","133":"og_age(h_age)","134":"list_split(S, step)","135":"lateralsurface_cube(l)","136":"square_Sum(n)","137":"ind_star_num(n)","138":"ascii_value(k)","139":"sum_even_and_even_index(arr)","140":"ven_Power_Sum(n)","141":"rear_extract(test_list)","142":"substract_elements(test_tup1, test_tup2)","143":"ven_binomial_Coeff_Sum(n)","144":"volume_cylinder(r, h)","145":"ict_filter(dict, n)","146":"count_first_elements(test_tup)","147":"is_num_decagonal(n)","148":"sequential_search(dlist, item)","149":"all_unique(test_list)","150":"sub_list(nums1, nums2)","151":"validate(n)","152":"check_element(list, element)","153":"text_match_two_three(text)","154":"max_sub_array_sum_repeated(a, n, k)","155":"square_Sum(n)","156":"max_length(list1)","157":"ind(n, m)","158":"otherside_rightangle(w, h)","159":"max_val(listval)","160":"sum_div(number)","161":"get_Inv_Count(arr)","162":"latten_list(list1)","163":"max_aggregate(stdata)","164":"count_binary_seq(n)","165":"ict_depth(d)","166":"start_withp(words)","167":"max_sum_increasing_subseq(a, n, index, k)","168":"large_product(nums1, nums2, N)","169":"maximum(a, b)","170":"string_to_tuple(str1)","171":"set_left_most_unset_bit(n)","172":"volume_cone(r, h)","173":"highest_Power_of_2(n)","174":"ind_lucas(n)","175":"add_string(list_, string)","176":"convert_list_dictionary(l1, l2, l3)","177":"get_max_sum(n)","178":"check_distinct(test_tup)","179":"irst_non_repeating_character(str1)","180":"check_char(string)","181":"median_numbers(a, b, c)","182":"sum_of_digits(nums)","183":"xtract_freq(test_list)","184":"minimum(a, b)","185":"check_tuplex(tuplex, tuple1)","186":"ind_Parity(x)","187":"rearrange_bigger(n)","188":"min_product_tuple(list1)","189":"min_val(listval)","190":"remove_odd(l)","191":"xtract_nth_element(list1, n)","192":"overlapping(list1, list2)","193":"max_Product(arr)","194":"Find_Max(lst)","195":"round_and_sum(list1)","196":"cube_Sum(n)","197":"concatenate_tuple(test_tup)","198":"ind_Average_Of_Cube(n)","199":"xtract_rear(test_tuple)","200":"count_element_in_list(list1, x)","201":"ilter_oddnumbers(nums)","202":"change_date_format(dt)","203":"shell_sort(my_list)","204":"and_tuples(test_tup1, test_tup2)","205":"parabola_directrix(a, b, c)","206":"common_element(list1, list2)","207":"median_trapezium(base1, base2, height)","208":"check_greater(arr, number)","209":"last_Digit(n)","210":"neg_nos(list1)","211":"remove_odd(str1)","212":"count_bidirectional(test_list)","213":"multiple_to_single(L)","214":"ind_adverb_position(text)","215":"surfacearea_cube(l)","216":"positive_count(nums)","217":"index_multiplication(test_tup1, test_tup2)","218":"count_Occurrence(tup, lst)","219":"cube_nums(nums)","220":"cal_sum(n)","221":"xtract_string(str, l)","222":"remove_whitespaces(text1)","223":"sumofFactors(n)","224":"text_match_wordz(text)","225":"check_monthnumb_number(monthnum2)","226":"reverse_string_list(stringlist)","227":"Find_Min(lst)","228":"rectangle_area(l, b)","229":"remove_uppercase(str1)","230":"Extract(lst)","231":"upper_ctr(str)","232":"combinations_list(list1)","233":"max_subarray_product(arr)","234":"rop_empty(dict1)","235":"max_product(arr)","236":"add_pairwise(test_tup)","237":"ind_remainder(arr, n)","238":"check_Consecutive(l)","239":"tuple_intersection(test_list1, test_list2)","240":"replace_char(str1, ch, newch)","241":"sort_counter(dict1)","242":"big_sum(nums)","243":"is_lower(string)","244":"remove_lowercase(str1)","245":"irst_Digit(n)","246":"Split(list)","247":"ifference(n)","248":"ind_Odd_Pair(A, N)","249":"toggle_string(string)","250":"igit_distance_nums(n1, n2)","251":"max_sub_array_sum(a, size)","252":"union_elements(test_tup1, test_tup2)","253":"Find_Max_Length(lst)","254":"xtract_values(text)","255":"count_Pairs(arr, n)","256":"split(word)","257":"sum_digits(n)","258":"issort_list(list1)","259":"mpty_list(length)","260":"sort_sublists(list1)","261":"two_unique_nums(nums)","262":"unique_product(list_data)","263":"surfacearea_cylinder(r, h)","264":"is_Sub_Array(A, B)","265":"last_Digit_Factorial(n)","266":"interleave_lists(list1, list2, list3)","267":"ind_dissimilar(test_tup1, test_tup2)","268":"ven_ele(test_tuple, even_fnc)","269":"surface_Area(b, s)","270":"my_dict(dict1)","271":"catalan_number(num)","272":"xpensive_items(items, n)","273":"split_Arr(l, n)","274":"list_tuple(listx)","275":"big_diff(nums)","276":"perfect_squares(a, b)","277":"polar_rect(x, y)","278":"swap_List(newList)","279":"binomial_Coeff(n, k)","280":"removezero_ip(ip)","281":"iff_even_odd(list1)","282":"min_Swaps(str1, str2)","283":"tuple_size(tuple_list)","284":"ind_kth(arr1, arr2, k)","285":"armstrong_number(number)","286":"sum_average(number)","287":"is_Even(n)","288":"irst_repeated_char(str1)","289":"get_ludic(n)","290":"reverse_words(s)","291":"prime_num(num)","292":"radian_degree(degree)","293":"ind_literals(text, pattern)","294":"bell_Number(n)","295":"remove_kth_element(list1, L)","296":"max_of_nth(test_list, N)","297":"merge(lst)","298":"cummulative_sum(test_list)","299":"average_tuple(nums)","300":"tuple_modulo(test_tup1, test_tup2)","301":"iv_list(nums1, nums2)","302":"move_num(test_str)","303":"largest_subset(a)","304":"get_median(arr1, arr2, n)","305":"nth_nums(nums, n)","306":"is_upper(string)","307":"triangle_area(r)","308":"replace_spaces(string)","309":"Split(list)","310":"adjac(ele, sub=[])","311":"replace_spaces(text)","312":"move_zero(num_list)","313":"pair_xor_Sum(arr, n)","314":"heap_sort(iterable)","315":"noprofit_noloss(actual_cost, sale_amount)","316":"wind_chill(v, t)","317":"sample_nam(sample_names)","318":"remove_parenthesis(items)","319":"is_nonagonal(n)","320":"text_match_wordz_middle(text)","321":"reverse_Array_Upto_K(input, k)","322":"add_dict_to_tuple(test_tup, test_dict)","323":"maxAverageOfPath(cost)","324":"ilter_data(students, h, w)","325":"count_same_pair(nums1, nums2)","326":"power_base_sum(base, power)","327":"xtract_quotation(text1)","328":"multiply_elements(test_tup)","329":"sum_list(lst1, lst2)","330":"consecutive_duplicates(nums)","331":"lateralsurface_cone(r, h)","332":"replace_specialchar(text)","333":"ind_first_occurrence(A, x)","334":"sum_Of_Subarray_Prod(arr)","335":"set_middle_bits(n)","336":"left_insertion(a, x)","337":"check_str(string)","338":"ind_Index(n)","339":"tuple_to_dict(test_tup)","340":"all_Characters_Same(s)","341":"area_tetrahedron(side)","342":"rotate_right(list, m)","343":"check_none(test_tup)","344":"ivisible_by_digits(startnum, endnum)","345":"sector_area(r, a)","346":"capital_words_spaces(str1)","347":"sort_numeric_strings(nums_str)","348":"add_tuple(test_list, test_tup)","349":"check_min_heap_helper(arr, i)","350":"jacobsthal_num(n)","351":"min_k(test_list, K)","352":"xtract_index_list(l1, l2, l3)","353":"second_smallest(numbers)","354":"count_reverse_pairs(test_list)","355":"unique_sublists(list1)","356":"is_decimal(num)","357":"unique_Element(arr)","358":"check_monthnumber_number(monthnum3)","359":"ind_min_diff(arr, n)","360":"number_ctr(str)","361":"is_polite(n)","362":"pair_wise(l1)","363":"get_pairs_count(arr, sum)","364":"Diff(li1, li2)","365":"odd_num_sum(n)","366":"check_expression(exp)","367":"remove_length(test_str, K)","368":"occurance_substring(text, pattern)","369":"odd_position(nums)","370":"ind_sum(arr)","371":"pack_consecutive_duplicates(list1)","372":"ind_combinations(test_list)","373":"count_divisors(n)","374":"odd_length_sum(arr)","375":"rgb_to_hsv(r, g, b)","376":"mul_even_odd(list1)","377":"tuple_str_int(test_str)","378":"right_insertion(a, x)","379":"text_match_three(text)","380":"new_tuple(test_list, test_str)","381":"ven_position(nums)","382":"remove_nested(test_tup)","383":"count_list(input_list)","384":"last(arr, x)","385":"text_starta_endb(text)","386":"return_sum(dict)","387":"sum_odd(n)","388":"_sum(arr)","389":"left_rotate(n, d)","390":"remove_all_spaces(text)","391":"test_three_equal(x, y, z)","392":"is_perfect_square(n)","393":"is_product_even(arr)","394":"max_sum_list(lists)","395":"max_run_uppercase(test_str)","396":"irst_odd(nums)","397":"check_K(test_tup, K)","398":"check_smaller(test_tup1, test_tup2)"},"completion":{"0":"def similar_elements(test_tup1, test_tup2):\n    # Convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of both sets\n    similar = set1.intersection(set2)\n    \n    # Return the result as a tuple\n    return tuple(similar)\n\n# Test the function","1":"def is_not_prime(n):\n    if n <= 1:\n        return True  # 0 and 1 are not prime numbers\n    if n <= 3:\n        return False  # 2 and 3 are prime numbers\n    if n % 2 == 0 or n % 3 == 0:\n        return True  # multiples of 2 and 3 are not prime\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n","2":"def heap_queue_largest(nums, n):\n    import heapq\n    return heapq.nlargest(n, nums)\n","3":"def is_Power_Of_Two(x):\n    return x and (not(x & (x-1)))\n","4":"def find_char_long(text):\n    words = text.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n","5":"def square_nums(nums):\n    return [num ** 2 for num in nums]\n","6":"def find_Rotations(s):\n    n = len(s)\n    if n == 0:\n        return 0  # No rotation needed for an empty string\n\n    # Check if all characters are same\n    ch = s[0]\n    all_same = True\n    for char in s:\n        if char != ch:\n            all_same = False\n            break\n    if all_same:\n        return 1  # Any rotation will give the same string\n\n    # Find the smallest rotation\n    for i in range(1, n):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return n  # Full rotation needed\n\n# Test cases","7":"def remove_Occ(s, ch):\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]\n","8":"def sort_matrix(M):\n    return sorted(M, key=sum)\n","9":"def find_Volume(l, b, h):\n    area = (l * b) \/ 2\n    volume = area * h\n    return volume\n","10":"def text_lowercase_underscore(text):\n    if not text:\n        return False  # Empty string does not contain any sequences\n\n    # Check if the text contains at least one underscore\n    if '_' not in text:\n        return False\n\n    # Split the text by underscore and check if all parts are lowercase letters\n    parts = text.split('_')\n    for part in parts:\n        if not part.islower():\n            return False\n    return True\n\n# Test cases","11":"def square_perimeter(a):\n    return 4 * a\n","12":"def remove_dirty_chars(s, dirty):\n    clean = ''\n    for char in s:\n        if char not in dirty:\n            clean += char\n    return clean\n","13":"def test_duplicate(arraynums):\n    # Create an empty set to store unique elements\n    seen = set()\n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return True\n        # Add the number to the set\n        seen.add(num)\n    # If no duplicates were found, return False\n    return False\n\n# Test the function","14":"def is_woodall(x):\n    if x < 0:\n        return False\n    n = 0\n    while True:\n        woodall = (1 << n) * n - 1\n        if woodall == x:\n            return True\n        elif woodall > x:\n            return False\n        n += 1\n","15":"def rev(num):\n    return int(str(num)[::-1])\n","16":"def find_Max_Num(arr):\n    # Convert all integers in the list to strings\n    str_arr = list(map(str, arr))\n    \n    # Sort the array based on the custom comparison\n    str_arr.sort(reverse=True, key=lambda x: x*(len(max(str_arr, key=len))))\n    \n    # Join the sorted strings to form the largest number\n    largest_num = ''.join(str_arr)\n    \n    # Convert the result back to integer\n    return int(largest_num)\n","17":"def opposite_Signs(x, y):\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n","18":"def is_octagonal(n):\n    return n*(3*n-2)\n","19":"def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == (j - i + 1):\n                count += 1\n    return count\n","20":"def smallest_num(xs):\n    if not xs:\n        return None  # or raise an exception if you prefer\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n","21":"def max_difference(test_list):\n    # Initialize a variable to store the maximum difference found\n    max_diff = 0\n    \n    # Iterate through each tuple in the list\n    for pair in test_list:\n        # Calculate the difference between the two elements in the tuple\n        diff = abs(pair[0] - pair[1])\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff\n\n# Test the function with the provided ","22":"def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n","23":"def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\n# Test the function","24":"def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function","25":"def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n","26":"def is_Monotonic(A):\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            decreasing = False\n        elif A[i] < A[i-1]:\n            increasing = False\n    return increasing or decreasing\n","27":"def is_sublist(l, s):\n    len_l = len(l)\n    len_s = len(s)\n    for i in range(len_l - len_s + 1):\n        if l[i:i+len_s] == s:\n            return True\n    return False\n","28":"def ind_equal_tuple(Input):\n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Iterate through the rest of the tuples\n    for tup in Input[1:]:\n        # If any tuple has a different length, return False\n        if len(tup) != first_length:\n            return False\n    # If all tuples have the same length, return True\n    return True\n\n# Test cases","29":"def comb_sort(nums):\n    shrink_factor = 1.3\n    gap = len(nums)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap \/ shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n\n# Test the function","30":"def dif_Square(n):\n    # Any number that is not of the form 4k+2 can be represented as the difference of two squares.\n    # This is because:\n    # - If n is odd, n = 2k+1, then n = (k+1)^2 - k^2.\n    # - If n is even and divisible by 4, n = 4k, then n = (k+1)^2 - (k-1)^2.\n    # - If n is even but not divisible by 4, n = 4k+2, then n cannot be expressed as the difference of two squares.\n    # Therefore, we can check if n is not of the form 4k+2.\n    \n    return n % 4 != 2\n","31":"def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True\n","32":"def find_tuples(test_list, K):\n    res = [tuple for tuple in test_list if all(ele % K == 0 for ele in tuple)]\n    return res\n","33":"def is_Diff(n):\n    s = str(n)\n    odd = 0\n    even = 0\n    for i in range(0, len(s)):\n        if i % 2 == 0:\n            odd += int(s[i])\n        else:\n            even += int(s[i])\n    diff = abs(odd - even)\n    if diff % 11 == 0:\n        return True\n    else:\n        return False\n","34":"def word_len(s):\n    return len(s) % 2 != 0\n","35":"def tetrahedral_number(n):\n    if n <= 0:\n        return 0\n    return tetrahedral_number(n-1) + (n*(n+1))\/\/2\n","36":"def volume_sphere(r):\n    return 4\/3 * math.pi * r**3\n","37":"def get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    total = total % 26\n    return chr(total + ord('a'))\n","38":"def sequence(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        p = [0, 1, 1]\n        for i in range(3, n+1):\n            p.append(p[p[i-1]] + p[i - p[i-1]])\n        return p[n]","39":"def surfacearea_sphere(r):\n    pi = 3.1415926535\n    return 4 * pi * r * r\n","40":"def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n","41":"def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n","42":"def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n\n# Test the function\nprint(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]))\n","43":"def closest_num(N):\n    return N - 1\n","44":"def len_log(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n# Test the function\nprint(len_log([\"python\", \"PHP\", \"bigdata\"]))  # Output: 7\n","45":"def ind_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n\n# Test the function\nprint(ind_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"))  # Output: True\nprint(ind_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"))  # Output: False\n","46":"def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first = s[0]\n    second = s[1]\n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True\n","47":"def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n","48":"def index_minimum(test_list):\n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    # Return the first value of that tuple\n    return min_tuple[0]\n\n# Test the function","49":"def Find_Min_Length(lst):\n    if not lst:\n        return 0  # or perhaps float('inf'), depending on requirements\n    min_len = float('inf')\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise ValueError(\"All elements of the input should be lists.\")\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len\n\n# Test cases","50":"def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n","51":"def frequency_lists(list1):\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency\n\n# Test the function\nprint(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n","52":"def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result \/ len(numbers)\n","53":"def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_digits = []\n    while n > 0:\n        binary_digits.append(str(n % 2))\n        n = n \/\/ 2\n    binary_digits.reverse()\n    return ''.join(binary_digits)\n","54":"def next_smallest_palindrome(num):\n    num_str = str(num)\n    n = len(num_str)\n    \n    # Special case for single-digit numbers\n    if n == 1:\n        return num + 1\n    \n    # Find the middle index\n    mid = n \/\/ 2\n    \n    # Increment the left half and mirror it to the right half\n    left_half = num_str[:mid]\n    left_num = int(left_half)\n    left_num += 1\n    left_half = str(left_num)\n    \n    # If the length of the left half increases, adjust the palindrome\n    if len(left_half) > mid:\n        # For even length, just mirror the incremented left half\n        if n % 2 == 0:\n            next_palindrome = left_half + left_half[::-1]\n        # For odd length, mirror the incremented left half without the middle digit\n        else:\n            next_palindrome = left_half + left_half[-2::-1]\n    else:\n        # For even length, mirror the left half\n        if n % 2 == 0:\n            next_palindrome = left_half + left_half[::-1]\n        # For odd length, mirror the left half without the middle digit\n        else:\n            next_palindrome = left_half + left_half[-2::-1]\n    \n    return int(next_palindrome)\n\n# Test the function\nprint(next_smallest_palindrome(99))  # Output: 101\n","55":"def kth_element(arr, k):\n    if k <= 0 or k > len(arr):\n        raise ValueError(\"k is out of bounds\")\n    return arr[k - 1]\n\n# Test the function","56":"def snake_to_camel(word):\n    # Split the string by underscore\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them together\n    return ''.join(word.capitalize() for word in words)\n","57":"def eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n","58":"def sort_sublists(input_list):\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n\n# Test the function\ninput_list = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]\nsorted_list = sort_sublists(input_list)\nprint(sorted_list)","59":"def count(lst):\n    return sum(1 for item in lst if item)\n","60":"def add_lists(test_list, test_tup):\n    # Convert the tuple to a list to make it mutable\n    temp_list = list(test_tup)\n    \n    # Extend the temporary list with the test_list\n    temp_list.extend(test_list)\n    \n    # Convert the temporary list back to a tuple\n    result_tup = tuple(temp_list)\n    \n    return result_tup\n\n# Test the function","61":"def merge_sorted_list(num1, num2, num3):\n    # Combine all three lists into one\n    combined = num1 + num2 + num3\n    # Sort the combined list\n    sorted_combined = sorted(combined)\n    return sorted_combined\n\n# Test the function","62":"def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated_s = s[i:] + s[:i]\n        decimal_value = int(rotated_s, 2)\n        if decimal_value % 2 == 1:\n            count += 1\n    return count\n","63":"def common_in_nested_lists(nestedlist):\n    # Convert the first sublist to a set\n    common_elements = set(nestedlist[0])\n    \n    # Iterate over the remaining sublists\n    for sublist in nestedlist[1:]:\n        # Convert the sublist to a set and find intersection with common_elements\n        common_elements &= set(sublist)\n        \n        # Early termination if no common elements are left\n        if not common_elements:\n            break\n    \n    return list(common_elements)\n","64":"def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n","65":"def mpty_dit(list1):\n    for dit in list1:\n        if dit:\n            return False\n    return True\n","66":"def tuple_to_int(nums):\n    # Initialize an empty string to hold the concatenated numbers\n    concatenated = ''\n    \n    # Iterate through each number in the tuple\n    for num in nums:\n        # Convert the integer to a string and append it to the concatenated string\n        concatenated += str(num)\n    \n    # Convert the concatenated string back to an integer\n    result = int(concatenated)\n    \n    # Return the final integer\n    return result\n","67":"def list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        temp = []\n        for item in sublist:\n            try:\n                temp.append(float(item))\n            except ValueError:\n                temp.append(item)\n        result.append(tuple(temp))\n    return result\n\n# Test the function\ntest_list = [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]\nprint(list_to_float(test_list))\n","68":"def string_to_list(string):\n    return string.split()\n","69":"def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 2\n    return arr[left]\n","70":"def max_product_tuple(list1):\n    max_product = 0\n    for tuple in list1:\n        product = tuple[0] * tuple[1]\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product\n","71":" amicable_numbers_sum(limit):\n    def sum_proper_divisors(n):\n        total = 1  # 1 is a proper divisor for all n > 1\n        sqrt_n = int(n**0.5)\n        for i in range(2, sqrt_n + 1):\n            if n % i == 0:\n                total += i\n                if i != n \/\/ i:\n                    total += n \/\/ i\n        return total\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_proper_divisors(num)\n        if partner > num and sum_proper_divisors(partner) == num:\n            amicable_sum += num + partner\n\n    return amicable_sum\n\n# Test the function","72":"def angle_complex(a, b):\n    import cmath\n    c = complex(a, b)\n    return cmath.phase(c)\n","73":"def ind_length(string):\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff\n","74":"def sum(a, b):\n    # Find the smaller number\n    smaller = min(a, b)\n    sum = 0\n    # Iterate through all numbers from 1 to smaller\n    for i in range(1, smaller + 1):\n        # If i is a divisor of both a and b, add it to sum\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n\n# Test the function","75":"def multiply_int(x, y):\n    return x * y\n","76":"def long_words(n, str):\n    words = str.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n\n# Test the function\nprint(long_words(3, \"python is a programming language\"))  # Output: ['python', 'programming', 'language']\n","77":"def magic_square_test(my_matrix):\n    # Determine the size of the matrix\n    size = len(my_matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for col in range(size):\n        col_sum = sum(row[col] for row in my_matrix)\n        if col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = sum(my_matrix[i][i] for i in range(size))\n    if diagonal_sum != magic_sum:\n        return False\n    \n    anti_diagonal_sum = sum(my_matrix[i][size - 1 - i] for i in range(size))\n    if anti_diagonal_sum != magic_sum:\n        return False\n    \n    return True\n\n# Test the function\nmatrix = [\n    [7, 12, 1, 14],\n    [2, 13, 8, 11],\n    [16, 3, 10, 5],\n    [9, 6, 15, 4]\n]","78":"def max_occurrences(nums):\n    frequency = {}\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    max_freq = 0\n    max_num = None\n    for num, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num\n","79":"def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s)-1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(s)\n\n# Test the function\nprint(reverse_vowels(\"Python\"))  # Should print \"Python\" since there's only one vowel\nprint(reverse_vowels(\"Hello\"))   # Should print \"Holle\"\nprint(reverse_vowels(\"Programming\"))  # Should print \"Prigrammong\"\n","80":"def tup_string(tup1):\n    return ''.join(tup1)\n","81":"def sum_negativenum(nums):\n    # Initialize a variable to store the sum of negative numbers\n    negative_sum = 0\n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            negative_sum += num\n    # Return the sum of negative numbers\n    return negative_sum\n\n# Test the function","82":"def hexagonal_num(n):\n    return n * (2 * n - 1)\n","83":"def zero_count(nums):\n    total = len(nums)\n    zeros = nums.count(0)\n    non_zeros = total - zeros\n    ratio = zeros \/ non_zeros\n    return ratio\n","84":"def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n > 1:\n        if n % 2 != 0:\n            return False\n        n = n \/\/ 2\n    return True\n","85":"def circle_circumference(r):\n    return 2 * 3.1415926535 * r\n","86":"def xtract_singly(test_list):\n    # Initialize an empty set to store unique elements\n    result_set = set()\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Update the set with elements from the current tuple\n        result_set.update(tup)\n    \n    # Return the resulting set\n    return result_set\n\n# Test the function\ntest_list = [(3, 4, 5), (4, 5, 7), (1, 4)]\nprint(set(xtract_singly(test_list)))  # Output should be {1, 3, 4, 5, 7}\n","87":" pancake_sort(nums):\n    \"\"\"\n    Sort a list of integers in ascending order using the pancake sorting algorithm.\n\n    Pancake sorting is the colloquial term for the mathematical problem of sorting a disordered stack of pancakes in order of size when a spatula can be inserted at any point in the stack and used to flip all pancakes above it. A pancake number is the minimum number of flips required for a given number of pancakes. In this case, the function sorts a list of integers using flips.\n\n    :param nums: List of integers to be sorted.\n    :return: The sorted list of integers.\n\n    Example:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n\n    def flip(sublist, k):\n        \"\"\"\n        Flip the first k elements of the sublist.\n\n        :param sublist: The list to flip.\n        :param k: The number of elements from the start to flip.\n        \"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in nums[0 to n-1]\n        max_idx = nums.index(max(nums[0:n]))\n        \n        # Move the maximum element to the end of the current array if it's not already at the end\n        if max_idx != n - 1:\n            # Flip the array from 0 to max_idx, so that the max element is at the beginning\n            flip(nums, max_idx + 1)\n            # Flip the entire array from 0 to n-1, so that the max element is at the end\n            flip(nums, n)\n        \n        # Reduce the array size by one, since the largest element is now in its correct position\n        n -= 1\n\n    return nums\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n","88":"def count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count\n","89":"def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n","90":"def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0  # or perhaps raise an error, depending on requirements\n    min_val = arr[0]\n    max_diff = 0\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        else:\n            diff = num - min_val\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n","91":" find_solution(a, b, n):\n    # Check if n is divisible by the greatest common divisor of a and b\n    def gcd(x, y):\n        while y != 0:\n            (x, y) = (y, x % y)\n        return x\n\n    gcd_ab = gcd(a, b)\n    if n % gcd_ab != 0:\n        return None\n\n    # Extended Euclidean Algorithm to find x and y\n    def extended_gcd(x, y):\n        if x == 0:\n            return (y, 0, 1)\n        else:\n            g, y1, x1 = extended_gcd(y % x, x)\n            return (g, x1 - (y \/\/ x) * y1, y1)\n\n    # Scale the solution by n \/ gcd_ab\n    g, x, y = extended_gcd(a, b)\n    x *= n \/\/ g\n    y *= n \/\/ g\n\n    return (x, y)\n\n# Test the function\nprint(find_solution(2, 3, 7))  # Output should be (2, 1)\n","92":"def remove_elements(list1, list2):\n    # Create a new list that contains only the elements from list1 that are not in list2\n    result = [element for element in list1 if element not in list2]\n    return result\n\n# Test the function","93":"def sum_series(n):\n    total = 0\n    for i in range(0, n \/\/ 2 + 1):\n        term = n - 2 * i\n        if term > 0:\n            total += term\n        else:\n            break\n    return total\n\n# Test the function","94":"def iv_sum(n):\n    s = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s += i\n    return s\n","95":"def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == chr(97 + i):  # 97 is the ASCII code for 'a'\n            count += 1\n    return count\n","96":"def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n","97":"def next_power_of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n","98":"def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n\n# Test cases","99":"def sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n","100":"def perimeter_pentagon(a):\n    return 5 * a\n","101":"def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n\n# Test the function\nprint(count_occurance(\"letstdlenstdporstd\"))  # Output: 3\n","102":" check_type(test_tuple):\n    if not test_tuple:  # Check if the tuple is empty\n        return True  # or False, depending on your definition for empty tuples\n    first_type = type(test_tuple[0])\n    return all(type(item) is first_type for item in test_tuple)\n","103":"def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n \/ 2:\n        return True\n    else:\n        return False\n","104":"def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n","105":"def odd_values_string(s):\n    return s[::2]\n","106":"def min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test the function","107":"def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    result = negatives + positives + arr[n:]\n    return result\n","108":"def replace_blank(str1, char):\n    return str1.replace(\" \", char)\n","109":"def larg_nnum(list1, n):\n    # Sort the list in ascending order\n    list1.sort()\n    # Get the last n elements from the sorted list\n    largest_n = list1[-n:]\n    # Return the set of largest n numbers\n    return set(largest_n)\n","110":"def lateralsurface_cylinder(r, h):\n    import math\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n","111":"def volume_cube(l):\n    return l ** 3\n","112":"def even_bit_set_number(n):\n    # Initialize variables\n    result = 0\n    bit_position = 1  # Start from the least significant bit (LSB)\n    \n    # Iterate through all bits of the number\n    while n > 0:\n        if bit_position % 2 == 0:  # Check if the position is even\n            # Set the bit at the current even position\n            result |= (1 << (bit_position - 1))\n        n = n >> 1  # Move to the next bit\n        bit_position += 1  # Increment the bit position counter\n    \n    return result\n","113":"def check_occurrences(test_list):\n    occurrences = {}\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences\n\n# Test the function\ntest_list = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]\nprint(check_occurrences(test_list))\n","114":"def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) \/\/ 2\n\n# Test the function","115":"def get_total_number_of_sequences(m, n):\n    # This problem seems a bit tricky at first, but I think I can break it down.\n    # So, I need to find the number of sequences of length n, where each element is a positive integer.\n    # Additionally, each element should be greater than or equal to twice the previous element and less than or equal to m.\n    # For example, if m is 10 and n is 4, there are 4 such sequences.\n\n    # Let me try to understand this with smaller values.\n    # Suppose m = 5 and n = 2.\n    # Possible sequences:\n    # - Starting with 1: next can be 3, 4, or 5 (since 2*1=2, so >=2 and <=5)\n    # - Starting with 2: next can be 5 (since 2*2=4, so >=4 and <=5)\n    # - Starting with 3: no possible next element (since 2*3=6, which is >5)\n    # - Starting with 4: no possible next element (since 2*4=8, which is >5)\n    # - Starting with 5: no possible next element (since 2*5=10, which is >5)\n    # So total sequences: (1,3), (1,4), (1,5), (2,5) => 4 sequences.\n\n    # Wait, but according to the problem, for m=10 and n=4, there are 4 sequences.\n    # Maybe I need to generalize this.\n\n    # I think this can be solved using recursion or dynamic programming.\n    # Let's think recursively.\n    # Suppose I have a sequence of length k, ending with some number x.\n    # Then, to extend it to length k+1, the next number y should satisfy 2x <= y <= m.\n\n    # But if I try to implement this directly, it might be inefficient for larger values of m and n.\n\n    # Maybe there's a smarter way. Let's consider the constraints.\n    # Each element is at least twice the previous one.\n    # This reminds me of binary sequences or something similar.\n\n    # Wait a minute, in binary numbers, each bit is twice the value of the previous bit.\n    # But I'm not sure if that directly applies here.\n\n    # Let's try to find a pattern","116":"def replace_list(list1, list2):\n    # Remove the last element of list1\n    list1.pop()\n    # Extend list1 with all elements from list2\n    list1.extend(list2)\n    # Return the modified list1\n    return list1\n","117":"def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n","118":"def next_Perfect_Square(N):\n    import math\n    sqrt_N = math.isqrt(N)\n    next_sqrt = sqrt_N + 1\n    next_square = next_sqrt * next_sqrt\n    return next_square\n","119":"def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [arr[i] for i in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    dec = [arr[i] for i in range(n)]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum\n","120":"def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n","121":"def intersection_array(array_nums1, array_nums2):\n    # Convert both lists to sets to remove duplicates and perform intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list\n    result = list(intersection)\n    # Sort the result to have a consistent order\n    result.sort()\n    return result\n\n# Test the function","122":"def count_X(tup, x):\n    return tup.count(x)\n","123":"def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function","124":"def convert(z):\n    import cmath\n    r = abs(z)\n    theta = cmath.phase(z)\n    return (r, theta)\n","125":"def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n","126":"def combinations_colors(l, n):\n    from itertools import product\n    return list(product(l, repeat=n))\n","127":"def count_Primes_nums(n):\n    if n<=2:\n        return 0\n    else:\n        primes = [True for i in range(n)]\n        p=2\n        while(p*p < n):\n            if primes[p] == True:\n                for i in range(p*p, n, p):\n                    primes[i] = False\n            p +=1\n        c=0\n        for p in range(2, n):\n            if primes[p]:\n                c +=1\n        return c\n","128":"def swap_numbers(a, b):\n    return (b, a)\n","129":"def maximize_elements(test_tup1, test_tup2):\n    # Convert the tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Ensure both lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Input tuples must have the same length\")\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the tuples element-wise\n    for tup1, tup2 in zip(list1, list2):\n        # Ensure both tuples have the same length\n        if len(tup1) != len(tup2):\n            raise ValueError(\"Sub-tuples must have the same length\")\n        \n        # Initialize a temporary list to store the maximum values\n        max_tup = []\n        \n        # Iterate through the elements of the sub-tuples\n        for elem1, elem2 in zip(tup1, tup2):\n            # Append the maximum value from each position\n            max_tup.append(max(elem1, elem2))\n        \n        # Convert the list back to a tuple and add to the result list\n        result.append(tuple(max_tup))\n    \n    # Convert the result list back to a tuple\n    return tuple(result)\n\n# Test the function\ntest_tup1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntest_tup2 = ((6, 7), (3, 9), (1, 1), (7, 3))","130":"def newman_prime(n):\n    if n <= 0:\n        return None  # or raise an error for invalid input\n    primes = [2, 3]\n    while len(primes) < n:\n        next_prime = primes[-1] * primes[-2] + 1\n        primes.append(next_prime)\n    return primes[n-1]\n\n# Test the function","131":"def division_elements(test_tup1, test_tup2):\n    res = tuple(i \/\/ j for i, j in zip(test_tup1, test_tup2))\n    return res\n","132":"def split_two_parts(list1, L):\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n","133":"def dog_age(h_age):\n    if h_age < 0:\n        raise ValueError(\"Age cannot be negative.\")\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return int(d_age)\n","134":"def list_split(S, step):\n    result = []\n    for i in range(step):\n        sublist = S[i::step]\n        if sublist:\n            result.append(sublist)\n    return result\n","135":"def lateralsurface_cube(l):\n    return 4 * l * l\n","136":"def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum","137":"def find_star_num(n):\n    if n < 1:\n        return 0\n    star_num = 1  # Starting with the first star number\n    for i in range(1, n):\n        star_num += 6 * i  # Each subsequent star number adds a layer of 6*i points\n    return star_num\n\n# Test the function","138":"def ascii_value(char):\n    return ord(char)\n","139":"def sum_even_and_even_index(arr):\n    total = 0\n    for index in range(len(arr)):\n        if index % 2 == 0 and arr[index] % 2 == 0:\n            total += arr[index]\n    return total\n\n# Test the function\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8]))  # Output: 30\n","140":"def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        fifth_power = even_number ** 5\n        total += fifth_power\n    return total\n\n# Test the function\nprint(even_Power_Sum(2))  # Output: 1056\n","141":"def rear_extract(test_list):\n    return [t[-1] for t in test_list]\n","142":"def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n","143":"def even_binomial_Coeff_Sum(n):\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    sum_even = 0\n    for k in range(0, n+1, 2):\n        sum_even += binomial_coefficient(n, k)\n    return sum_even\n","144":"def volume_cylinder(r, h):\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n","145":"def dict_filter(dictionary, n):\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n\n# Test the function","146":"def count_first_elements(test_tup):\n    # Initialize a counter to keep track of the number of elements before the tuple element\n    count = 0\n    # Iterate through each element in the tuple\n    for item in test_tup:\n        # Check if the current item is a tuple\n        if isinstance(item, tuple):\n            # If it is a tuple, return the count of elements before it\n            return count\n        else:\n            # If it is not a tuple, increment the count\n            count += 1\n    # If no tuple is found, return the total number of elements in the tuple\n    return count\n\n# Test the function\ntest_tup = (1, 5, 7, (4, 6), 10)\nprint(count_first_elements(test_tup))  # Output: 3\n","147":"def is_num_decagonal(n):\n    return n * (4 * n - 3)\n","148":"def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n","149":"def all_unique(test_list):\n    # Create an empty set to store unique elements\n    seen = set()\n    # Iterate through each element in the list\n    for elem in test_list:\n        # If the element is already in the set, it's not unique\n        if elem in seen:\n            return False\n        # Add the element to the set\n        seen.add(elem)\n    # If no duplicates were found, all elements are unique\n    return True\n\n# Test cases","150":"def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]\n","151":"def validate(n):\n    s = str(n)\n    for d in s:\n        if s.count(d) > int(d):\n            return False\n    return True\n","152":"def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Test the function\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue'))  # Should return False\n","153":"def text_match_two_three(text):\n    import re\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n","154":" max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    if k == 1:\n        return kadane(a)\n\n    total_sum = sum(a)\n    if total_sum > 0:\n        return kadane(a * k)\n    else:\n        return max(kadane(a + a), kadane(a * k))\n\n# Test the function","155":"def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even = 2*i\n        sum += even*even\n    return sum","156":"def max_length(list1):\n    # Initialize variables to store the maximum length and the corresponding list\n    max_len = 0\n    max_list = []\n    \n    # Iterate through each list in the given list of lists\n    for sublist in list1:\n        # Check if the current list's length is greater than the current maximum length\n        if len(sublist) > max_len:\n            # Update the maximum length and the corresponding list\n            max_len = len(sublist)\n            max_list = sublist\n    \n    # Return a tuple containing the maximum length and the corresponding list\n    return (max_len, max_list)\n","157":"def find(n, m):\n    return n \/\/ m\n","158":"def otherside_rightangle(w, h):\n    return (w ** 2 + h ** 2) ** 0.5\n","159":"def max_val(listval):\n    max_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value\n","160":"def sum_div(number):\n    divisors = [1]\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            divisors.append(i)\n            if i != number \/\/ i:\n                divisors.append(number \/\/ i)\n    return sum(divisors)\n","161":"def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n","162":"def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n# Test the function\nnested_list = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]","163":"def max_aggregate(stdata):\n    # Create a dictionary to store the sum of scores for each name\n    score_dict = {}\n    for name, score in stdata:\n        if name in score_dict:\n            score_dict[name] += score\n        else:\n            score_dict[name] = score\n    # Find the name with the maximum score\n    max_name = max(score_dict, key=score_dict.get)\n    # Return the name and the maximum score as a tuple\n    return (max_name, score_dict[max_name])\n","164":"def count_binary_seq(n):\n    from math import comb\n    total = 0\n    for k in range(n + 1):\n        total += comb(n, k) ** 2\n    return total\n","165":"def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth\n","166":"def start_withp(words):\n    # Initialize an empty list to store words starting with 'p'\n    p_words = []\n    \n    # Iterate through each string in the list\n    for phrase in words:\n        # Split the string into words\n        words_list = phrase.split()\n        \n        # Check each word in the list\n        for word in words_list:\n            # Check if the word starts with 'p' or 'P' (case-insensitive)\n            if word.lower().startswith('p'):\n                # Add the word to the list\n                p_words.append(word)\n                \n                # If we have collected two words, return them as a tuple\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    \n    # If less than two words starting with 'p' are found, return what's available\n    return tuple(p_words)\n","167":"def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum to a very small number\n    max_sum = float('-inf')\n    \n    # Iterate from the start of the array to the index i\n    for i in range(index + 1):\n        current_sum = a[i]\n        prev = a[i]\n        \n        # Check if the kth element is greater than the current element\n        if a[k] > prev:\n            current_sum += a[k]\n            prev = a[k]\n        \n        # Iterate from the current position to the kth element\n        for j in range(i + 1, k):\n            if a[j] > prev:\n                current_sum += a[j]\n                prev = a[j]\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Test the function","168":"def large_product(nums1, nums2, N):\n    # First, we need to find all possible products of one element from nums1 and one from nums2.\n    # To efficiently find the N largest products, we can use a heap data structure.\n    # Since Python's heapq module provides a min-heap, we'll use negative values to simulate a max-heap.\n\n    import heapq\n\n    # Initialize a min-heap\n    min_heap = []\n\n    # Iterate through all pairs\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n\n            # If we have less than N products, push the negative product into the heap\n            if len(min_heap) < N:\n                heapq.heappush(min_heap, product)\n            else:\n                # If the current product is larger than the smallest in the heap, replace it\n                if product > min_heap[0]:\n                    heapq.heappushpop(min_heap, product)\n\n    # Since we used negative values, convert back to positive and sort descending\n    result = sorted([-x for x in min_heap], reverse=True)\n    return result\n","169":"def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n","170":"def string_to_tuple(str1):\n    return tuple(str1)\n","171":"def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    mask = 1\n    while (mask & n) != 0:\n        mask <<= 1\n    return n | mask\n","172":"def volume_cone(r, h):\n    import math\n    return (1\/3)*math.pi*(r**2)*h\n","173":"def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power \/\/ 2\n","174":"def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b\n","175":"def add_string(list_, string):\n    return [string.format(item) for item in list_]\n\n# Test the function","176":"def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        nested_dict = {l1[i]: {l2[i]: l3[i]}}\n        result.append(nested_dict)\n    return result\n\n# Test the function\nl1 = [\"S001\", \"S002\", \"S003\", \"S004\"]\nl2 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nl3 = [85, 98, 89, 92]\nprint(convert_list_dictionary(l1, l2, l3))\n","177":" get_max_sum(n):\n    memo = {}\n    def f(n):\n        if n in memo:\n            return memo[n]\n        option1 = n\n        if n >= 2:\n            option1 = f(n\/\/2) + f(n\/\/3) + f(n\/\/4) + f(n\/\/5)\n        memo[n] = max(option1, n)\n        return memo[n]\n    return f(n)\n","178":"def check_distinct(test_tup):\n    # Convert the tuple to a set to remove duplicates\n    unique_elements = set(test_tup)\n    \n    # Compare the length of the set with the original tuple\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False\n","179":"def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n","180":"def check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n","181":"def median_numbers(a, b, c):\n    # Find the smallest number\n    smallest = min(a, b, c)\n    # Find the largest number\n    largest = max(a, b, c)\n    # The median is the remaining number\n    # Since the smallest and largest are removed, the median is the one left\n    # We can calculate it by summing all three numbers and subtracting the smallest and largest\n    median = a + b + c - smallest - largest\n    return float(median)\n\n# Test the function","182":"def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        # Convert the number to a string to iterate over each digit\n        num_str = str(num)\n        for char in num_str:\n            # Convert each character back to an integer and add to the sum\n            total_sum += int(char)\n    return total_sum\n\n# Test the function","183":"def xtract_freq(test_list):\n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Sort the tuple and convert it to a tuple again\n        sorted_tup = tuple(sorted(tup))\n        # Add the sorted tuple to the set\n        unique_tuples.add(sorted_tup)\n    \n    # Return the number of unique tuples\n    return len(unique_tuples)\n\n# Test the function\ntest_list = [(3, 4), (1, 2), (4, 3), (5, 6)]\nprint(xtract_freq(test_list))  # Output: 3\n","184":"def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n","185":"def check_tuplex(tuplex, element):\n    return element in tuplex\n","186":"def find_Parity(x):\n    return bool(x % 2)\n","187":"def rearrange_bigger(n):\n    s = list(str(n))\n    for i in range(len(s)-2, -1, -1):\n        if s[i] < s[i+1]:\n            t = s[i:]\n            m = min(filter(lambda x: x>t[0], t))\n            t.remove(m)\n            t.sort()\n            s[i:] = [m] + t\n            return int(\"\".join(s))\n    return -1\n","188":"def min_product_tuple(list1):\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n","189":"def min_val(listval):\n    min_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    return min_value\n","190":"def remove_odd(l):\n    return [x for x in l if x % 2 == 0]\n","191":"def extract_nth_element(list1, n):\n    return [tup[n] for tup in list1]\n","192":"def overlapping(list1, list2):\n    # Convert both lists to sets for efficient intersection operation\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if intersection of both sets is non-empty\n    if set1.intersection(set2):\n        return True\n    else:\n        return False\n","193":"def max_Product(arr):\n    if len(arr) < 2:\n        return None  # or raise an exception, depending on requirements\n    # Initialize the two largest numbers\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    \n    for num in arr[2:]:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max2, max1) if max2 * max1 > (-max2) * (-max1) else (-max2, -max1) if arr.count(max1) < 2 and arr.count(max2) < 2 else (max1, max2)\n","194":"def Find_Max(lst):\n    if not lst:\n        return None  # Return None for empty list\n    max_len = -1\n    res = None\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            res = ele\n    return res\n","195":"def round_and_sum(list1):\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    # Print the result\n    print(result)\n    # Return the result\n    return result\n\n# Test the function","196":"def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even = 2 * i\n        sum += even ** 3\n    return sum","197":"def concatenate_tuple(test_tup):\n    # Convert each element in the tuple to string and join them with '-'\n    result = '-'.join(str(element) for element in test_tup)\n    return result\n\n# Test the function\nprint(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))  # Output: 'ID-is-4-UTS'\n","198":"def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes \/ n\n    return average\n\nprint(find_Average_Of_Cube(2))  # Output: 4.5\n","199":"def xtract_rear(test_tuple):\n    return [s[-1] for s in test_tuple]\n","200":"def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n# Test the function\nlist1 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nx = 1","201":"def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n","202":"def change_date_format(dt):\n    parts = dt.split('-')\n    return '-'.join([parts[2], parts[1], parts[0]])\n","203":"def shell_sort(my_list):\n    n = len(my_list)\n    gap = n \/\/ 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n\n    return my_list\n\n# Test the function","204":"def and_tuples(test_tup1, test_tup2):\n    res = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return res\n","205":"def parabola_directrix(a, b, c):\n    # The standard form of a parabola is y = ax^2 + bx + c\n    # The formula for the directrix of a parabola is y = c - (b^2 - 1)\/(4a)\n    # However, in this problem, it seems like the directrix is being represented by a single value,\n    # possibly the y-coordinate of the directrix.\n    # Given the test case ","206":"def common_element(list1, list2):\n    # Convert both lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if intersection of both sets is non-empty\n    if set1.intersection(set2):\n        return True\n    else:\n        return False\n","207":"def median_trapezium(base1, base2, height):\n    # The median of a trapezium is the average of the two bases.\n    # So, median = (base1 + base2) \/ 2\n    median = (base1 + base2) \/ 2\n    # The area of a trapezium is (sum of the bases) \/ 2 * height\n    # But since median is already the average of the bases, area = median * height\n    # However, the problem seems to ask for the median length, not the area.\n    # Given the ","208":"def check_greater(arr, number):\n    for num in arr:\n        if number <= num:\n            return False\n    return True\n","209":"def last_Digit(n):\n    return abs(n) % 10\n","210":"def neg_nos(list1):\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers\n\n# Test the function","211":"def remove_odd(str1):\n    return str1[1::2]\n","212":"def count_bidirectional(test_list):\n    seen = set()\n    count = 0\n    for pair in test_list:\n        # Create a sorted tuple to handle both directions as the same\n        canonical_pair = tuple(sorted(pair))\n        if canonical_pair in seen:\n            count += 1\n        else:\n            seen.add(canonical_pair)\n    return count\n","213":"def multiple_to_single(L):\n    # Initialize an empty string to store the concatenated number\n    concatenated = ''\n    # Iterate through each number in the list\n    for num in L:\n        # Convert the integer to string and append to the concatenated string\n        concatenated += str(num)\n    # Convert the concatenated string back to integer and return\n    return int(concatenated)\n","214":"def find_adverb_position(text):\n    import re\n    # Use regular expression to find adverbs ending with 'ly'\n    match = re.search(r'\\b\\w+ly\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    else:\n        return None\n","215":"def surfacearea_cube(l):\n    return 6 * l * l\n","216":"def positive_count(nums):\n    if not nums:\n        return 0.0  # Return 0 if the list is empty to avoid division by zero\n    positive_nums = [num for num in nums if num > 0]\n    ratio = len(positive_nums) \/ len(nums)\n    return round(ratio, 2)  # Round to two decimal places for consistency\n","217":"def index_multiplication(test_tup1, test_tup2):\n    res = tuple(tuple(a*b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res\n","218":"def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\n\n# Test the function","219":"def cube_nums(nums):\n    return [num ** 3 for num in nums]\n\n# Test the function","220":"def cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        perrin = [3, 0, 2]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-3] + perrin[i-2])\n        return sum(perrin)\n","221":"def extract_string(lst, length):\n    return [s for s in lst if len(s) == length]\n\n# Test the function","222":"def remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")\n","223":"def sumofFactors(n):\n    # Initialize result\n    res = 1\n    # Consider all prime factors\n    # and their powers\n    for i in range(2, n + 1):\n        # Check if i is a prime factor\n        if (n % i == 0):\n            # Initialize current sum and current term\n            current_sum = 1\n            current_term = 1\n            # While i divides n\n            while (n % i == 0):\n                # If i is 2, include it in the sum\n                if i == 2:\n                    current_sum += current_term * i\n                # Divide n by i\n                n = n \/\/ i\n                # Update current term\n                current_term *= i\n            # Multiply res with current sum\n            res *= current_sum\n    return res\n\n# Test the function","224":"def text_match_wordz(text):\n    import re\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n","225":"def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n","226":"def reverse_string_list(stringlist):\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n\n# Test the function","227":"def Find_Min(lst):\n    if not lst:  # check if the list is empty\n        return None  # return None for empty list\n    min_len = float('inf')  # initialize min_len with infinity\n    min_sublist = None  # initialize min_sublist with None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n","228":"def rectangle_area(l, b):\n    return l * b\n","229":"def remove_uppercase(str1):\n    result = ''\n    for char in str1:\n        if not char.isupper():\n            result += char\n    return result\n\n# Test the function\nprint(remove_uppercase('cAstyoUrFavoRitETVshoWs'))  # Output: cstyoravoitshos\n","230":"def Extract(lst):\n    return [sublist[0] for sublist in lst]\n","231":"def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test the function","232":" combinations_list(lst):\n    from itertools import chain, combinations\n\n    def all_combinations(input_list):\n        return chain.from_iterable(combinations(input_list, r) for r in range(len(input_list)+1))\n\n    result = [list(comb) for comb in all_combinations(lst)]\n    return result\n","233":"def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_so_far = min_so_far = result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_so_far, min_so_far = min_so_far, max_so_far\n        max_so_far = max(num, max_so_far * num)\n        min_so_far = min(num, min_so_far * num)\n        result = max(result, max_so_far)\n    return result\n","234":"def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None}\n","235":"def max_product(arr):\n    n = len(arr)\n    # Initialize dp array to store the maximum product up to each index\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            # Check if the subsequence is increasing\n            if arr[i] > arr[j]:\n                # Update dp[i] to be the maximum of its current value and the product of dp[j] and arr[i]\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    # Return the maximum value in dp array\n    return max(dp)\n\n# Test the function\nprint(max_product([3, 100, 4, 5, 150, 6]))  # Output: 3000\n","236":"def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        sum = test_tup[i] + test_tup[i+1]\n        result.append(sum)\n    return tuple(result)\n","237":"def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    remainder = product % n\n    return remainder\n","238":"def check_Consecutive(l):\n    return sorted(l) == list(range(min(l), max(l)+1))\n","239":"def tuple_intersection(test_list1, test_list2):\n    # Convert each tuple in the lists to a sorted tuple to make them order-irrespective\n    sorted_list1 = [tuple(sorted(t)) for t in test_list1]\n    sorted_list2 = [tuple(sorted(t)) for t in test_list2]\n    \n    # Find the intersection of the two lists\n    intersection = set(sorted_list1).intersection(sorted_list2)\n    \n    # Convert back to the original tuple format\n    result = set(tuple(t) for t in intersection)\n    \n    return result\n\n# Test the function\ntest_list1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\ntest_list2 = [(5, 4), (3, 4), (6, 5), (9, 11)]\nprint(tuple_intersection(test_list1, test_list2))  # Output: {(3, 4), (4, 5), (5, 6)}\n","240":"def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n","241":"def sort_counter(dict1):\n    # Use the sorted function with key parameter to sort the dictionary by value\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return sorted_dict\n","242":"def big_sum(nums):\n    return max(nums) + min(nums)\n","243":"def is_lower(string):\n    return string.lower()\n","244":"def remove_lowercase(str1):\n    return ''.join([char for char in str1 if not char.islower()])\n","245":"def first_Digit(n):\n    while n >= 10:\n        n \/\/= 10\n    return n\n","246":"def Split(lst):\n    return [num for num in lst if num % 2 != 0]\n","247":"def difference(n):\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers\n","248":"def ind_Odd_Pair(A, N):\n    even_count = 0\n    odd_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count\n","249":"def toggle_string(string):\n    toggled = \"\"\n    for char in string:\n        if char.isupper():\n            toggled += char.lower()\n        elif char.islower():\n            toggled += char.upper()\n        else:\n            toggled += char\n    return toggled\n\n# Test the function\nprint(toggle_string(\"Python\"))  # Output: \"pYTHON\"\n","250":"def digit_distance_nums(n1, n2):\n    # Convert integers to strings to handle digits easily\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Ensure both strings have the same length by padding with leading zeros\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    \n    # Calculate the sum of absolute differences of corresponding digits\n    distance = 0\n    for d1, d2 in zip(str_n1, str_n2):\n        distance += abs(int(d1) - int(d2))\n    \n    return distance\n\n# Test the function","251":"def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far\n\n# Test the function","252":"def union_elements(test_tup1, test_tup2):\n    # Convert tuples to sets to perform union operation\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Perform union\n    union_set = set1.union(set2)\n    \n    # Convert back to tuple and sort\n    result_tuple = tuple(sorted(union_set))\n    \n    return result_tuple\n\n# Test the function","253":"def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\n# Test the function","254":"def extract_values(text):\n    import re\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Test the function","255":"def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n# Test the function","256":"def split(word):\n    return [char for char in word]\n","257":"def sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n \/\/= 10\n    return sum\n","258":"def issort_list(lst):\n    # Check if the list is sorted in ascending order\n    is_ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    \n    # Check if the list is sorted in descending order\n    is_descending = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n    \n    # Return True if either ascending or descending is True, else False\n    return is_ascending or is_descending\n\n# Test the function","259":"def empty_list(length):\n    return [{} for _ in range(length)]\n","260":"def sort_sublists(list1):\n    result = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result\n\n# Test the function\nlist1 = [['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]\nsorted_list = sort_sublists(list1)\nprint(sorted_list)","261":"def two_unique_nums(nums):\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    result = []\n    for num, count in counts.items():\n        if count == 1:\n            result.append(num)\n    return result\n","262":"def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n","263":"def surfacearea_cylinder(r, h):\n    import math\n    return 2 * math.pi * r * (r + h)\n","264":"def is_Sub_Array(A, B):\n    if not B:  # if B is empty, it's a sublist of any list\n        return True\n    if not A:  # if A is empty but B is not, B can't be a sublist\n        return False\n\n    len_a = len(A)\n    len_b = len(B)\n\n    # If B is longer than A, it can't be a sublist\n    if len_b > len_a:\n        return False\n\n    # Iterate through A to find the starting index of potential sublist\n    for i in range(len_a - len_b + 1):\n        # Check if the slice of A starting at i matches B\n        if A[i:i+len_b] == B:\n            return True\n\n    # If no matching slice is found\n    return False\n\n# Test cases","265":" last_Digit_Factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(2, n+1):\n            factorial *= i\n        return factorial % 10\n","266":"def interleave_lists(list1, list2, list3):\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result\n\n# Test the function\nlist1 = [1,2,3,4,5,6,7]\nlist2 = [10,20,30,40,50,60,70]\nlist3 = [100,200,300,400,500,600,700]","267":"def ind_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find elements present in set1 but not in set2\n    dissimilar_in_set1 = set1 - set2\n    \n    # Find elements present in set2 but not in set1\n    dissimilar_in_set2 = set2 - set1\n    \n    # Combine the dissimilar elements from both sets\n    combined_dissimilar = dissimilar_in_set1.union(dissimilar_in_set2)\n    \n    # Convert the set back to a tuple\n    result_tuple = tuple(combined_dissimilar)\n    \n    return result_tuple\n\n# Test the function","268":"def ven_ele(test_tuple, even_fnc):\n    res = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            res.append(ven_ele(ele, even_fnc))\n        else:\n            if even_fnc(ele):\n                res.append(ele)\n    return tuple(res)\n","269":"def surface_Area(b, s):\n    # Calculate the base area\n    base_area = b * b\n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * (b * s) \/ 2\n    # Total surface area is base area plus lateral surface area\n    total_surface_area = base_area + lateral_surface_area\n    return total_surface_area\n\n# Test the function","270":"def my_dict(d):\n    return len(d) == 0\n","271":"def catalan_number(n):\n    if n <=1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n-i-1)\n    return res\n","272":"def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]\n","273":"def split_Arr(l, n):\n    return l[n:] + l[:n]\n","274":"def list_tuple(listx):\n    return tuple(listx)\n","275":"def big_diff(nums):\n    return max(nums) - min(nums)\n","276":"def perfect_squares(a, b):\n    squares = []\n    for i in range(a, b+1):\n        root = i ** 0.5\n        if root.is_integer():\n            squares.append(i)\n    return squares","277":"def polar_rect(x, y):\n    import cmath\n    # Calculate magnitude (r) and phase angle (theta) from x and y\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(complex(x, y))\n    \n    # Convert polar coordinates to rectangular coordinates\n    rect_coords = cmath.rect(r, theta)\n    \n    return (r, theta), rect_coords\n\n# Test the function\nprint(polar_rect(3,4))\n","278":"def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList  # Return the list unchanged if it has fewer than two elements\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList\n","279":"def binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res \/\/ (i + 1)\n    return res\n","280":"def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)\n\n# Test the function","281":"def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return None  # or raise an exception if no even or odd number is found\n","282":"def min_Swaps(str1, str2):\n    # Convert strings to lists for easier manipulation\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # Initialize swap count\n    swap_count = 0\n    \n    # Iterate through each bit position\n    for i in range(len(list1)):\n        # If the bits are different, find the next position where str1 has the correct bit and swap\n        if list1[i] != list2[i]:\n            # Find the next position where str1 has the bit matching str2[i]\n            for j in range(i+1, len(list1)):\n                if list1[j] == list2[i]:\n                    # Swap the found bit with the current bit\n                    list1[i], list1[j] = list1[j], list1[i]\n                    swap_count += 1\n                    break\n            else:\n                # If no such bit is found, it's impossible to convert\n                return -1  # or some indicator of impossibility\n    \n    return swap_count\n","283":"def tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n","284":"def find_kth(arr1, arr2, k):\n    # Ensure arr1 is the smaller array to optimize the binary search\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    # Base cases\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # Determine the parts to discard\n    i = min(k \/\/ 2, len(arr1))\n    j = min(k \/\/ 2, len(arr2))\n    \n    if arr1[i-1] < arr2[j-1]:\n        # Discard the first i elements of arr1\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        # Discard the first j elements of arr2\n        return find_kth(arr1, arr2[j:], k - j)\n\n# Test the function","285":"def armstrong_number(number):\n    # Convert the number to string to easily iterate over each digit\n    num_str = str(number)\n    num_length = len(num_str)\n    \n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_length\n    \n    # Check if the calculated sum is equal to the original number\n    return sum == number\n","286":"def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum \/ n\n    return (sum, average)","287":"def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n","288":"def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n","289":"def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n+1))\n    i = 1\n    while i < len(ludics):\n        current_ludic = ludics[i]\n        # Remove every current_ludic-th element from the list, starting after the current_ludic\n        ludics = [ludics[j] for j in range(len(ludics)) if j <= i or (j - i) % current_ludic != 0]\n        i += 1\n    return ludics\n\n# Test the function","290":"def reverse_words(s):\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n","291":"def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n","292":"def radian_degree(degree):\n    import math\n    return degree * (math.pi \/ 180)\n","293":"def find_literals(text, pattern):\n    import re\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n","294":"def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n","295":"def remove_kth_element(list1, k):\n    # Create a copy of the list to avoid modifying the original list\n    result = list1.copy()\n    \n    # Remove the k'th element\n    if k > 0 and k <= len(result):\n        del result[k-1]\n    \n    return result\n","296":"def max_of_nth(test_list, N):\n    # Extract the N'th column from the matrix\n    nth_column = [row[N] for row in test_list]\n    # Find the maximum value in the N'th column\n    max_value = max(nth_column)\n    return max_value\n\n# Test the function","297":"def merge(lst):\n    # Initialize two empty lists to store the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sublist[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sublist[1])\n    \n    # Return a list containing the two lists\n    return [first_elements, second_elements]\n\n# Test the function","298":"def cummulative_sum(test_list):\n    total_sum = 0\n    for tup in test_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function","299":"def average_tuple(nums):\n    averages = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) \/ len(num_tuple)\n        averages.append(avg)\n    return averages\n\n# Test the function\nnums = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))\nprint(average_tuple(nums))  # Output: [10.5, 44.0, 58.0, 2.5]\n","300":"def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n","301":"def div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of the same length\")\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(num1 \/ num2)\n    return result\n\n# Test the function","302":"def move_num(test_str):\n    letters = []\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    result = ''.join(letters + numbers)\n    return result\n\n# Test the function\ntest_str = 'I1love143you55three3000thousand'\nprint(move_num(test_str))  # Output: 'Iloveyouthreethousand1143553000'\n","303":"def largest_subset(a):\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize a list to store the length of the largest divisible subset ending at each index\n    dp = [1] * len(a)\n    \n    # Variable to keep track of the maximum subset size\n    max_subset = 1\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(a)):\n        # Iterate through all previous elements\n        for j in range(i):\n            # Check if a[i] is divisible by a[j] and if extending the subset gives a larger subset\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                # Update the maximum subset size\n                if dp[i] > max_subset:\n                    max_subset = dp[i]\n    \n    return max_subset\n","304":"def get_median(arr1, arr2, n):\n    # Merge the two arrays into one\n    merged = sorted(arr1 + arr2)\n    \n    # Calculate the median\n    if n * 2 % 2 == 0:\n        # If the total number of elements is even\n        mid = n * 2 \/\/ 2\n        median = (merged[mid - 1] + merged[mid]) \/ 2\n    else:\n        # If the total number of elements is odd\n        median = merged[n]\n    \n    return median\n\n# Test the function\narr1 = [1, 12, 15, 26, 38]\narr2 = [2, 13, 17, 30, 45]\nn = 5\nprint(get_median(arr1, arr2, n))  # Output should be 16.0\n","305":"def nth_nums(nums, n):\n    return [num ** n for num in nums]\n\n# Test the function","306":"def is_upper(string):\n    return string.upper()\n","307":"def triangle_area(r):\n    if r < 0:\n        return None\n    else:\n        return (r**2)\n","308":"def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n","309":"def Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\n# Test the function","310":"def get_coordinates(coord):\n    x, y = coord\n    adjacents = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            adjacents.append([x + dx, y + dy])\n    return adjacents\n","311":"def replace_spaces(text):\n    return text.replace(' ', '_')\n","312":"def move_zero(num_list):\n    # Initialize a list to hold non-zero elements\n    non_zero = []\n    # Initialize a counter for zero elements\n    zero_count = 0\n    # Iterate through the list\n    for num in num_list:\n        # If the element is not zero, append it to the non_zero list\n        if num != 0:\n            non_zero.append(num)\n        # If the element is zero, increment the zero_count\n        else:\n            zero_count += 1\n    # Extend the non_zero list with zeros based on zero_count\n    non_zero.extend([0]*zero_count)\n    # Return the modified list\n    return non_zero\n","313":"def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\n# Test the function\narr = [5, 9, 7, 6]\nn = 4\nprint(pair_xor_Sum(arr, n))  # Output: 47\n","314":"def heap_sort(iterable):\n    # Convert the iterable to a list to make it mutable\n    arr = list(iterable)\n    n = len(arr)\n\n    # Build a max-heap\n    for i in range(n \/\/ 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one from the heap\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n\n    return arr\n","315":"def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\n","316":"def wind_chill(v, t):\n    wci = 13.12 + 0.6215*t - 11.37*(v**0.16) + 0.3965*t*(v**0.16)\n    return round(wci)\n","317":"def sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    # Calculate the sum of the lengths of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n\n# Test the function","318":"def remove_parenthesis(items):\n    result = []\n    for item in items:\n        # Find the position of the first '('\n        start = item.find('(')\n        # Find the position of the corresponding ')'\n        if start != -1:\n            end = item.find(')', start)\n            if end != -1:\n                # Remove the portion between '(' and ')'\n                new_item = item[:start].strip() + item[end+1:].strip()\n                result.append(new_item)\n            else:\n                # If there is no corresponding ')', keep the original string\n                result.append(item)\n        else:\n            # If there is no '(', keep the original string\n            result.append(item)\n    return result\n\n# Test the function\nprint(remove_parenthesis([\"python (chrome)\"]))  # Output: ['python']\n","319":"def is_nonagonal(n):\n    if n < 1:\n        return 0\n    x = (n * (7 * n - 5)) \/\/ 2\n    return x\n","320":"def text_match_wordz_middle(text):\n    # Check if 'z' is present in the text, excluding the first and last characters\n    # Convert the text to lowercase to make the search case-insensitive\n    lower_text = text.lower()\n    \n    # Check if the first character is 'z'\n    if lower_text[0] == 'z':\n        # Remove the first character\n        lower_text = lower_text[1:]\n    \n    # Check if the last character is 'z'\n    if lower_text[-1] == 'z':\n        # Remove the last character\n        lower_text = lower_text[:-1]\n    \n    # Check if 'z' is present in the remaining text\n    return 'z' in lower_text\n","321":"def reverse_Array_Upto_K(arr, k):\n    # Reverse the subarray up to position k\n    arr[:k] = arr[:k][::-1]\n    return arr\n\n# Test the function\nprint(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4))  # Output: [4, 3, 2, 1, 5, 6]\n","322":"def add_dict_to_tuple(test_tup, test_dict):\n    # Convert the tuple to a list to allow modifications\n    temp_list = list(test_tup)\n    \n    # Append the dictionary to the list\n    temp_list.append(test_dict)\n    \n    # Convert the list back to a tuple\n    result_tup = tuple(temp_list)\n    \n    return result_tup\n\n# Test the function","323":"def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    dp[0][0] = cost[0][0]\n    \n    # Initialize the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Initialize the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Calculate the average\n    max_sum = dp[N-1][N-1]\n    path_length = N * N\n    average = max_sum \/ path_length\n    return average\n","324":"def filter_data(students, min_height, min_weight):\n    filtered = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered[name] = (height, weight)\n    return filtered\n\n# Test the function\nstudents = {\n    'Cierra Vega': (6.2, 70),\n    'Alden Cantrell': (5.9, 65),\n    'Kierra Gentry': (6.0, 68),\n    'Pierre Cox': (5.8, 66)\n}\nmin_height = 6.0\nmin_weight = 70\nprint(filter_data(students, min_height, min_weight))  # Output: {'Cierra Vega': (6.2, 70)}\n","325":"def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums2 = [2, 2, 3, 1, 2, 6, 7, 9]\nprint(count_same_pair(nums1, nums2))  # Output: 4\n","326":"def power_base_sum(base, power):\n    # Calculate base to the power of power\n    num = base ** power\n    # Convert the result to a string to iterate over each digit\n    num_str = str(num)\n    # Initialize sum\n    total = 0\n    # Iterate over each character in the string\n    for char in num_str:\n        # Convert character back to integer and add to sum\n        total += int(char)\n    # Return the sum\n    return total\n\n# Test the function\nprint(power_base_sum(2,100))  # Should print 115\n","327":"def extract_quotation(text1):\n    import re\n    return re.findall(r'\\\"(.*?)\\\"', text1)\n","328":"def multiply_elements(test_tup):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate through the tuple, stopping before the last element\n    for i in range(len(test_tup) - 1):\n        # Multiply the current element with the next one and append to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    # Convert the result list back to a tuple and return it\n    return tuple(result)\n\n# Test the function","329":"def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\n","330":"def consecutive_duplicates(nums):\n    result = []\n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    return result\n\n# Test the function\nprint(consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n","331":"def lateralsurface_cone(r, h):\n    import math\n    l = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n","332":"def replace_specialchar(text):\n    # Define a function to replace spaces, commas, and dots with colons\n    # Iterate through each character in the text\n    # If the character is a space, comma, or dot, replace it with a colon\n    # Otherwise, keep the character as is\n    # Return the modified text\n\n    # Initialize an empty string to store the result\n    result = ''\n\n    # Define a string containing the characters to be replaced\n    special_chars = ' ,.'\n\n    # Iterate through each character in the input text\n    for char in text:\n        # Check if the character is in the special_chars string\n        if char in special_chars:\n            # If it is, append a colon to the result\n            result += ':'\n        else:\n            # If it's not a special character, append the original character\n            result += char\n\n    # Return the final result\n    return result\n\n# Test the function with the provided ","333":"def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # look for earlier occurrences\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n","334":"def sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum\n\n# Test the function\nprint(sum_Of_Subarray_Prod([1,2,3]))  # Output: 20\n","335":"def toggle_middle_bits(n):\n    if n <= 1:\n        return n  # No middle bits to toggle for numbers 0 or 1\n\n    # Find the number of bits in n\n    num_bits = n.bit_length()\n\n    # If n is 2, it's '10' in binary, and there are no middle bits\n    if num_bits == 2:\n        return n\n\n    # Create a mask to toggle only the middle bits\n    # The first bit is the most significant bit (MSB), and the last bit is the least significant bit (LSB)\n    # We need to create a mask that has 1s only in the positions between the first and last bits\n\n    # The mask should have 1s starting from the second least significant bit up to the second most significant bit\n\n    # Calculate the position of the second least significant bit\n    second_lsb_pos = 1  # Position 0 is the LSB\n\n    # Calculate the position of the second most significant bit\n    second_msb_pos = num_bits - 2\n\n    # Create the mask by setting bits from second_lsb_pos to second_msb_pos\n    mask = ((1 << (second_msb_pos + 1)) - 1) ^ ((1 << second_lsb_pos) - 1)\n\n    # Toggle the middle bits using the XOR operation\n    result = n ^ mask\n\n    return result\n\n# Test the function\nprint(toggle_middle_bits(9))  # Output should be 15\n","336":"def left_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n","337":"def check_str(string):\n    import re\n    pattern = '^[aeiouAEIOU]'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n","338":"def find_Index(n):\n    if n < 1:\n        return 0\n    index = 1\n    triangular = 1\n    while True:\n        if len(str(triangular)) >= n:\n            return index\n        index += 1\n        triangular += index\n","339":"def tuple_to_dict(test_tup):\n    # Check if the tuple has an even number of elements\n    if len(test_tup) % 2 != 0:\n        raise ValueError(\"Tuple must contain an even number of elements\")\n    \n    # Initialize an empty dictionary\n    res = {}\n    \n    # Iterate over the tuple two elements at a time\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        res[test_tup[i]] = test_tup[i+1]\n    \n    return res\n\n# Test the function","340":"def all_Characters_Same(s):\n    return len(set(s)) == 1\n","341":"def area_tetrahedron(side):\n    return (side ** 2) * (3 ** 0.5)\n","342":"def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n  # To handle cases where m >= n\n    rotated_lst = lst[-m:] + lst[:-m]\n    return rotated_lst\n\n# Test the function","343":"def check_none(test_tup):\n    return None in test_tup\n","344":"def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        valid = True\n        for digit_str in str_num:\n            digit = int(digit_str)\n            if digit == 0 or num % digit != 0:\n                valid = False\n                break\n        if valid:\n            result.append(num)\n    return result\n","345":"def sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        area = (a \/ 360) * 3.141592653589793 * (r ** 2)\n        return area\n","346":"def capital_words_spaces(str1):\n    result = ''\n    for char in str1:\n        if char.isupper():\n            result += ' ' + char\n        else:\n            result += char\n    return result.strip()\n\n# Test the function\nprint(capital_words_spaces(\"Python\"))  # Output: 'Python'\nprint(capital_words_spaces(\"PythonProgrammingIsFun\"))  # Output: 'Python Programming Is Fun'\n","347":"def sort_numeric_strings(nums_str):\n    # Convert the list of strings to integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums_int_sorted = sorted(nums_int)\n    return nums_int_sorted\n","348":"def add_tuple(test_list, test_tup):\n    # Convert the tuple to a list\n    tup_list = list(test_tup)\n    # Extend the original list with the elements from the tuple\n    test_list.extend(tup_list)\n    # Return the modified list\n    return test_list\n","349":"def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True\n\n# Test the function","350":"def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n","351":"def min_k(test_list, K):\n    # Sort the list of tuples based on the second element in each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Return the first K elements from the sorted list\n    return test_list[:K]\n\n# Test the function","352":"def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nresult = extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\nprint(result)  # Output should be [1, 7]\n","353":"def second_smallest(numbers):\n    # First, we need to find the smallest number in the list.\n    smallest = min(numbers)\n    \n    # Then, we need to find the second smallest number.\n    # We can do this by removing all instances of the smallest number and then finding the new smallest.\n    # However, removing all instances might not be efficient if the list is large.\n    # An alternative is to iterate through the list and find the smallest number that is greater than the smallest.\n    \n    # Let's initialize a variable to store the second smallest number.\n    # We'll set it to None initially.\n    second_smallest = None\n    \n    # Now, iterate through the list.\n    for num in numbers:\n        # If the current number is greater than the smallest and (second_smallest is None or num < second_smallest):\n        if num > smallest and (second_smallest is None or num < second_smallest):\n            second_smallest = num\n    \n    # After the loop, second_smallest should hold the second smallest number.\n    return second_smallest\n\n# Test the function","354":"def count_reverse_pairs(test_list):\n    # Create a set to store strings that have already been paired\n    paired = set()\n    # Initialize a counter for reverse pairs\n    count = 0\n    # Iterate through each string in the list\n    for str in test_list:\n        # Check if the reverse of the string is in the list and not already paired\n        rev_str = str[::-1]\n        if rev_str in test_list and rev_str not in paired:\n            # Increment the counter\n            count += 1\n            # Add both strings to the paired set to avoid double counting\n            paired.add(str)\n            paired.add(rev_str)\n    # Since each pair is counted twice, divide the count by 2\n    return count \/\/ 2\n\n# Test the function","355":"def unique_sublists(list1):\n    # Convert each sublist to a tuple so they can be used as keys in a dictionary\n    tuple_list = [tuple(sublist) for sublist in list1]\n    \n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate over the list of tuples\n    for t in tuple_list:\n        # If the tuple is already in the dictionary, increment its count\n        if t in count_dict:\n            count_dict[t] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[t] = 1\n    \n    # Return the dictionary\n    return count_dict\n\n# Test the function\nlist1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\nprint(unique_sublists(list1))\n","356":"def is_decimal(num):\n    try:\n        float_num = float(num)\n        parts = num.split('.')\n        if len(parts) == 2 and parts[1].isdigit() and len(parts[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n","357":"def unique_Element(arr):\n    return len(set(arr)) == 1\n","358":"def check_monthnumber_number(monthnum3):\n    # List of months with 30 days\n    months_with_30_days = [4, 6, 9, 11]\n    \n    # Check if the given month number is in the list\n    if monthnum3 in months_with_30_days:\n        return True\n    else:\n        return False\n\n# Test the function","359":"def find_min_diff(arr, n):\n    # First, sort the array to make it easier to find the minimum difference\n    arr_sorted = sorted(arr)\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array to find the smallest difference between consecutive elements\n    for i in range(n-1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Test the function","360":"def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n","361":"def is_polite(n):\n    if n == 0:\n        return 0\n    count = 0\n    num = 1\n    while True:\n        if bin(num).count('1') > 1:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n","362":"def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n\n# Test the function\nprint(pair_wise([1,1,2,3,3,4,4,5]))\n","363":"def get_pairs_count(arr, target_sum):\n    count = 0\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in arr:\n        complement = target_sum - num\n        if complement in freq:\n            count += freq[complement]\n            # If complement and num are the same, decrement the count by one\n            if complement == num:\n                count -= 1\n    # Since each pair is counted twice, divide the count by 2\n    return count \/\/ 2\n","364":"def Diff(li1, li2):\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n","365":"def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum","366":"def check_expression(exp):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return stack == []\n","367":"def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Filter out words that have length exactly K\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    return result\n\n# Test the function","368":"def occurance_substring(text, pattern):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    else:\n        return (pattern, index, index + len(pattern))\n","369":"def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n","370":"def find_sum(arr):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    sum = 0\n    for key, value in frequency.items():\n        if value == 1:\n            sum += key\n    return sum\n","371":"def pack_consecutive_duplicates(list1):\n    if not list1:\n        return []\n    \n    packed_list = []\n    current_sublist = [list1[0]]\n    \n    for i in range(1, len(list1)):\n        if list1[i] == current_sublist[-1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n\n# Test the function\nprint(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n","372":"def ind_combinations(test_list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over all pairs in the list\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Sum the elements of the two tuples\n            sum1 = test_list[i][0] + test_list[j][0]\n            sum2 = test_list[i][1] + test_list[j][1]\n            # Append the new tuple to the result list\n            result.append((sum1, sum2))\n    \n    return result\n\n# Test the function\ntest_list = [(2, 4), (6, 7), (5, 1), (6, 10)]\nprint(ind_combinations(test_list))\n","373":"def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n","374":"def odd_length_sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):  # j starts from i and increments by 2 to ensure odd length\n            subarr = arr[i:j+1]\n            total += sum(subarr)\n    return total\n\n# Test the function\nprint(odd_length_sum([1,2,4]))  # Output should be 14\n","375":"def rgb_to_hsv(r, g, b):\n    r, g, b = r\/255.0, g\/255.0, b\/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)\/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)\/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)\/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df\/mx)*100\n    v = mx*100\n    return h, s, v\n","376":"def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None\n","377":"def tuple_str_int(test_str):\n    # Remove the parentheses from the string\n    cleaned_str = test_str.strip('()')\n    # Split the string by commas to get individual numbers\n    num_strs = cleaned_str.split(',')\n    # Convert each string number to an integer\n    int_tuple = tuple(map(int, num_strs))\n    return int_tuple\n\n# Test the function","378":"def right_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n","379":"def text_match_three(text):\n    import re\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n","380":"def new_tuple(test_list, test_str):\n    # Combine the list and the string into a single tuple\n    res = tuple(test_list) + (test_str,)\n    return res\n\n# Test the function","381":"def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases","382":"def remove_nested(test_tup):\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\n# Test the function","383":"def count_list(input_list):\n    return len(input_list)\n\n# Test the function","384":"def last(arr, x):\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n","385":"def text_starta_endb(text):\n    import re\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n","386":"def return_sum(d):\n    return sum(d.values())\n","387":"def sum_odd(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total\n\n# Test the function\nprint(sum_odd(2, 5))  # Output: 8 (3 + 5)\n","388":"def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Test the function","389":"def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))\n","390":"def remove_all_spaces(text):\n    return text.replace(\" \", \"\")\n","391":"def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n","392":"def is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt = n ** 0.5\n    return sqrt.is_integer()\n\n# Test the function\nprint(is_perfect_square(16))  # True\nprint(is_perfect_square(14))  # False\nprint(is_perfect_square(-4))  # False\n","393":"def is_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n","394":"def max_sum_list(lists):\n    # Initialize variables to store the maximum sum and the list with that sum\n    max_sum = float('-inf')\n    max_list = None\n\n    # Iterate through each list in the list of lists\n    for lst in lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        # If the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the corresponding list\n            max_sum = current_sum\n            max_list = lst\n\n    # Return the list with the highest sum\n    return max_list\n","395":"def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n\n# Test the function","396":"def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None  # or raise an exception if no odd number is found\n","397":"def check_K(test_tup, K):\n    return K in test_tup\n","398":"def check_smaller(test_tup1, test_tup2):\n    return all(a < b for a, b in zip(test_tup1, test_tup2))\n"}}