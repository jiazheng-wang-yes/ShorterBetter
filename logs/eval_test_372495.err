Map:   0%|          | 0/100 [00:00<?, ? examples/s]Map: 100%|██████████| 100/100 [00:00<00:00, 2914.07 examples/s]
Map:   0%|          | 0/100 [00:00<?, ? examples/s]Map: 100%|██████████| 100/100 [00:00<00:00, 3224.65 examples/s]
Loading safetensors checkpoint shards:   0% Completed | 0/17 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:   6% Completed | 1/17 [00:07<02:00,  7.56s/it]
Loading safetensors checkpoint shards:  12% Completed | 2/17 [00:16<02:07,  8.49s/it]
Loading safetensors checkpoint shards:  18% Completed | 3/17 [00:24<01:55,  8.22s/it]
Loading safetensors checkpoint shards:  24% Completed | 4/17 [00:30<01:37,  7.50s/it]
Loading safetensors checkpoint shards:  29% Completed | 5/17 [00:48<02:13, 11.16s/it]
Loading safetensors checkpoint shards:  35% Completed | 6/17 [01:03<02:15, 12.29s/it]
Loading safetensors checkpoint shards:  41% Completed | 7/17 [01:10<01:45, 10.58s/it]
Loading safetensors checkpoint shards:  47% Completed | 8/17 [01:29<02:00, 13.34s/it]
Loading safetensors checkpoint shards:  53% Completed | 9/17 [01:42<01:46, 13.32s/it]
Loading safetensors checkpoint shards:  59% Completed | 10/17 [01:52<01:25, 12.19s/it]
Loading safetensors checkpoint shards:  65% Completed | 11/17 [02:11<01:25, 14.17s/it]
Loading safetensors checkpoint shards:  71% Completed | 12/17 [02:19<01:02, 12.48s/it]
Loading safetensors checkpoint shards:  76% Completed | 13/17 [02:36<00:55, 13.90s/it]
Loading safetensors checkpoint shards:  82% Completed | 14/17 [02:49<00:40, 13.42s/it]
Loading safetensors checkpoint shards:  88% Completed | 15/17 [02:54<00:22, 11.02s/it]
Loading safetensors checkpoint shards:  94% Completed | 16/17 [02:55<00:07,  7.88s/it]
Loading safetensors checkpoint shards: 100% Completed | 17/17 [02:55<00:00,  5.69s/it]
Loading safetensors checkpoint shards: 100% Completed | 17/17 [02:55<00:00, 10.34s/it]

Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:21,  1.59it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:20,  1.61it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:01<00:19,  1.61it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:02<00:19,  1.62it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:03<00:18,  1.62it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:03<00:17,  1.64it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:04<00:16,  1.65it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:04<00:16,  1.66it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:05<00:15,  1.67it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:06<00:14,  1.69it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:06<00:14,  1.69it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:07<00:13,  1.70it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:07<00:12,  1.70it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:08<00:12,  1.70it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:08<00:11,  1.70it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:09<00:11,  1.70it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:10<00:10,  1.72it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:10<00:09,  1.73it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:11<00:09,  1.75it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:11<00:08,  1.76it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:12<00:07,  1.76it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:12<00:07,  1.77it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:13<00:06,  1.78it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:14<00:06,  1.78it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:14<00:05,  1.78it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:15<00:05,  1.79it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:15<00:04,  1.80it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:16<00:03,  1.82it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:16<00:03,  1.83it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:17<00:02,  1.84it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:17<00:02,  1.86it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:18<00:01,  1.88it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:18<00:01,  1.88it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:19<00:00,  1.90it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:20<00:00,  1.55it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:20<00:00,  1.72it/s]
Map:   0%|          | 0/100 [00:00<?, ? examples/s]Map: 100%|██████████| 100/100 [00:00<00:00, 1233.32 examples/s]
0it [00:00, ?it/s]60it [00:00, 333.93it/s]98it [00:00, 315.71it/s]100it [00:00, 323.70it/s]
[rank0]: Traceback (most recent call last):
[rank0]:   File "/net/scratch/jingyang/ShorterBetter/eval/Coding/human_eval/evaluate_human_eval.py", line 144, in <module>
[rank0]:     results = entry_point(output_filepath)
[rank0]:               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/net/scratch/jingyang/ShorterBetter/eval/Coding/human_eval/evaluate_human_eval.py", line 121, in entry_point
[rank0]:     results = evaluate_functional_correctness(sample_file, k=k, n_workers=n_workers, timeout=timeout, problem_file=problem_file)
[rank0]:               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/net/scratch/jingyang/ShorterBetter/eval/Coding/human_eval/../../utils/evaluation.py", line 71, in evaluate_functional_correctness
[rank0]:     assert len(completion_id) == len(problems), "Some problems are not attempted."
[rank0]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]: AssertionError: Some problems are not attempted.
[rank0]:[W213 14:34:33.844341816 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
/home/jingyang22/.conda/envs/rp/lib/python3.12/multiprocessing/resource_tracker.py:254: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
